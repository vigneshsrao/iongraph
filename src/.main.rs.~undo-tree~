(undo-tree-save-format-version . 1)
"5ad4dfe280e35c43f4a00cc533e54b64340d7cbb"
[nil nil nil nil (25335 45041 341026 779000) 0 nil]
([nil nil ((26 . 31) (18 . 24) (#("Deserialize" 0 11 (fontified t ws-butler-chg chg face font-lock-type-face)) . -18) (undo-tree-id934 . -11) 29 (11 . 15) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-constant-face)) . -11) (undo-tree-id935 . -1) (10 . 12) (13 . 26) (12 . 14) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -12) (12 . 13) (1 . 12) (1 . 2) (1 . 2) (t 25335 37608 5812 964000)) nil (25335 45041 341025 657000) 0 nil])
([nil nil ((132 . 141) (#("
" 0 1 (fontified t ws-butler-chg chg)) . 73) (73 . 74) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 175) (undo-tree-id914 . -1) (#("
" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . 152) (nil ws-butler-chg delete 154 . 155) (153 . 154) (#("    " 0 4 (fontified t ws-butler-chg chg face font-lock-string-face)) . 153) (153 . 157) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . 153) (152 . 153) (175 . 176) (174 . 175) (173 . 174) (162 . 171) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -162) (undo-tree-id915 . -1) (158 . 163) (153 . 158) (141 . 153) (140 . 142) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -140) (140 . 141) (139 . 141) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -139) (132 . 140) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -132) (undo-tree-id916 . -1) 133 (132 . 133) (117 . 130) (#("/tmp/ion." 0 9 (fontified t ws-butler-chg chg face font-lock-string-face)) . -117) (undo-tree-id917 . -9) 126 (117 . 126) (116 . 118) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -116) (116 . 117) (#("file_" 0 5 (fontified t ws-butler-chg chg)) . -116) (undo-tree-id918 . -5) 121 (#("path" 0 4 (fontified t ws-butler-chg chg)) . -121) (undo-tree-id919 . -4) 125 (116 . 125) (115 . 117) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -115) (111 . 116) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -111) (undo-tree-id920 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -112) (undo-tree-id921 . -1) 113 (105 . 113) (84 . 105) (77 . 84) (93 . 97) (93 . 98) (#("    " 0 4 (fontified t)) . 93) (undo-tree-id922 . -4) 97 (73 . 77) (72 . 74) (71 . 73) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -71) (70 . 72) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -69) (undo-tree-id923 . -1) 70 (69 . 70) (67 . 69) (#("(" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . -67) (67 . 68) (66 . 68) (#("<" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -66) (60 . 67) (#("r" 0 1 (fontified nil ws-butler-chg chg)) . -60) (undo-tree-id924 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -61) (undo-tree-id925 . -1) 62 (56 . 62) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 56) (undo-tree-id926 . 1) (undo-tree-id927 . -1) (55 . 56) (54 . 56) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-function-name-face)) . -54) (54 . 55) (#("m" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -54) (undo-tree-id928 . -1) 55 (50 . 55) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-function-name-face)) . -50) (undo-tree-id929 . -1) (50 . 51) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -50) (undo-tree-id930 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -51) (undo-tree-id931 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -52) (undo-tree-id932 . -1) 53 (40 . 53) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -40) (undo-tree-id933 . -1) 41 (38 . 41) (35 . 38) (34 . 35) (33 . 34) (32 . 33)) nil (25335 45041 341019 856000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 199) (#(" " 0 1 (fontified t ws-butler-chg chg)) . 183) (undo-tree-id913 . -1) 140) nil (25335 45041 341010 328000) 0 nil])
([nil nil ((#("return " 0 6 (fontified t ws-butler-chg chg face font-lock-keyword-face) 6 7 (fontified t ws-butler-chg chg)) . -249) (undo-tree-id905 . -7) 256 (264 . 265) (259 . 263) (258 . 260) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -258) (256 . 259) (249 . 256) (244 . 249) (242 . 244) (233 . 241) (#("conte" 0 5 (fontified t ws-butler-chg chg)) . -233) (undo-tree-id906 . -5) 238 (236 . 238) (233 . 236) (#("s: &'a str" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 1 3 (fontified t ws-butler-chg chg) 3 4 (fontified t ws-butler-chg chg face rust-ampersand-face) 4 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 6 7 (fontified t ws-butler-chg chg) 7 10 (fontified t ws-butler-chg chg face font-lock-type-face)) . 233) (224 . 244) (#("from" 0 4 (fontified t ws-butler-chg chg)) . -224) (undo-tree-id907 . -4) 228 (223 . 228) (#("from" 0 4 (fontified t ws-butler-chg chg)) . -223) (undo-tree-id908 . -4) 227 (222 . 227) (212 . 222) (#("serde" 0 5 (fontified t ws-butler-chg chg)) . -212) (undo-tree-id909 . -5) 217 (212 . 217) (210 . 212) (209 . 210) (#(":" 0 1 (fontified t ws-butler-chg chg)) . -209) (undo-tree-id910 . -1) 210 (204 . 210) (202 . 204) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -202) (undo-tree-id911 . -1) (#("=" 0 1 (fontified t ws-butler-chg chg)) . -203) (undo-tree-id912 . -1) 204 (203 . 204) (198 . 203) (194 . 198) (190 . 194) (190 . 191) (189 . 190) (73 . 77) (73 . 74) 80 (t 25335 37885 825254 210000)) nil (25335 45041 341008 254000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 73) 248) nil (25335 45041 341002 553000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t)) . -253) (undo-tree-id904 . -1) 254 (t 25335 37940 30686 575000)) nil (25335 45041 341002 152000) 0 nil])
([nil nil ((67 . 72) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -67) (undo-tree-id898 . -1) (undo-tree-id899 . 1) (undo-tree-id900 . -1) (#(")" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -68) (undo-tree-id901 . -1) (undo-tree-id902 . 1) (undo-tree-id903 . -1) 69 (240 . 245) (t 25335 37941 590727 722000) 197) nil (25335 45041 341001 280000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 244) 71) nil (25335 45041 340999 66000) 0 nil])
([nil nil ((343 . 345) (341 . 343) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -341) (339 . 342) (#("b" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -339) (undo-tree-id888 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -340) (undo-tree-id889 . -1) 341 (337 . 341) (331 . 337) (328 . 331) (324 . 328) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -324) (undo-tree-id890 . -1) 325 (#("ble " 0 4 (fontified t ws-butler-chg chg face font-lock-string-face)) . -325) (undo-tree-id891 . -4) 329 (325 . 329) (323 . 325) (319 . 323) (318 . 320) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -318) (318 . 319) (317 . 319) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -317) (310 . 318) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -289) (undo-tree-id892 . -1) 290 (291 . 293) (290 . 291) (284 . 290) (282 . 284) (278 . 282) (296 . 297) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 296) (undo-tree-id893 . 1) (undo-tree-id894 . -1) (295 . 296) (294 . 296) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -294) (290 . 295) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -290) (undo-tree-id895 . -1) (281 . 291) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -281) (undo-tree-id896 . -1) 282 (281 . 282) (278 . 281) (273 . 278) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 273) (undo-tree-id897 . -4) 277 (272 . 277) (t 25335 37951 146979 712000) 271) nil (25335 45041 340997 122000) 0 nil])
([nil nil ((310 . 319) (t 25335 37997 869025 482000)) nil (25335 45041 340992 283000) 0 nil])
([nil nil ((232 . 233) (t 25335 38001 989283 926000)) nil (25335 45041 340992 3000) 0 nil])
([nil nil ((446 . 459) (449 . 450) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 447) (undo-tree-id879 . 1) (undo-tree-id880 . -1) (446 . 447) (445 . 447) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -445) (445 . 446) (440 . 445) (431 . 440) (430 . 432) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -430) (430 . 431) (429 . 431) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -429) (429 . 430) (#("@" 0 1 (fontified t ws-butler-chg chg)) . -429) (undo-tree-id881 . -1) 430 (421 . 430) (416 . 421) (415 . 416) (409 . 413) (408 . 410) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -408) (408 . 409) (407 . 409) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -407) (407 . 408) (#("]" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 407) (undo-tree-id882 . 1) (undo-tree-id883 . -1) (405 . 407) (404 . 406) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -404) (404 . 405) (401 . 402) (393 . 401) (392 . 394) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -392) (392 . 393) (391 . 393) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -391) (384 . 392) (382 . 384) (376 . 382) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -376) (undo-tree-id884 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -377) (undo-tree-id885 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -378) (undo-tree-id886 . -1) 379 (377 . 379) (368 . 377) (364 . 368) (359 . 364) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 359) (undo-tree-id887 . -4) 363 (358 . 363) (t 25335 38016 494185 162000) 355) nil (25335 45041 340988 927000) 0 nil])
([nil nil ((384 . 385) (t 25335 38069 997399 88000)) nil (25335 45041 340982 835000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -447) (undo-tree-id873 . -1) 448 (444 . 448) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -444) (undo-tree-id874 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -445) (undo-tree-id875 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -446) (undo-tree-id876 . -1) 447 (443 . 447) (438 . 443) (432 . 438) (#("function " 0 9 (fontified t face font-lock-string-face)) . -432) (undo-tree-id877 . -9) 441 (#("name" 0 4 (fontified t face font-lock-string-face)) . -441) (undo-tree-id878 . -4) 445 (t 25335 38083 330174 317000)) nil (25335 45041 340981 873000) 0 nil])
([nil nil ((#("    let function_name = &iondata[\"functions\"][0][\"name\"];
    println!(\"Found function: {function_name}\");
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 21 (fontified t face font-lock-variable-name-face) 21 24 (fontified t) 24 25 (fontified t face rust-ampersand-face) 25 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-2-face)) 33 43 (fontified t face font-lock-string-face) 43 44 (fontified t face font-lock-string-face) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t face (rainbow-delimiters-depth-2-face)) 46 47 (fontified t face highlight-numbers-number) 47 48 (fontified t face (rainbow-delimiters-depth-2-face)) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 54 (fontified t face font-lock-string-face) 54 55 (fontified t face font-lock-string-face) 55 56 (fontified t face (rainbow-delimiters-depth-2-face)) 56 58 (fontified t) 58 62 (fontified t) 62 70 (fontified t face rust-builtin-formatting-macro) 70 71 (fontified t face (rainbow-delimiters-depth-2-face)) 71 72 (fontified t face font-lock-string-face) 72 87 (fontified t face font-lock-string-face) 87 88 (fontified t face font-lock-string-face) 88 103 (fontified t face rust-string-interpolation) 103 104 (fontified t face font-lock-string-face) 104 105 (fontified t face (rainbow-delimiters-depth-2-face)) 105 106 (fontified t) 106 107 (fontified t)) . 360) (undo-tree-id869 . -58) (undo-tree-id870 . 20) (undo-tree-id871 . -58) (undo-tree-id872 . -58) 418 (t 25335 38096 406925 220000)) nil (25335 45041 340979 308000) 0 nil])
([nil nil ((#("    println!(\"Hello, world!\");
" 0 4 (fontified t) 4 5 (fontified t face rust-builtin-formatting-macro) 5 12 (fontified t face rust-builtin-formatting-macro) 12 13 (fontified t face (rainbow-delimiters-depth-2-face)) 13 28 (fontified t face font-lock-string-face) 28 29 (fontified t face (rainbow-delimiters-depth-2-face)) 29 31 (fontified t)) . 361)) nil (25335 45041 340977 806000) 0 nil])
([nil nil ((392 . 393) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 392) (391 . 392) (390 . 392) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -390) (390 . 391) (379 . 390) (377 . 379) (368 . 377) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -368) (undo-tree-id862 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -369) (undo-tree-id863 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -370) (undo-tree-id864 . -1) 371 (368 . 371) (#("opc" 0 3 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -368) (undo-tree-id865 . -3) 371 (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -371) (undo-tree-id866 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -372) (undo-tree-id867 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -373) (undo-tree-id868 . -1) 374 (368 . 374) (364 . 368) (359 . 364)) nil (25335 45041 340976 443000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t ws-butler-chg chg)) . -443) (undo-tree-id855 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -444) (undo-tree-id856 . -1) 445 (443 . 445) (434 . 443) (471 . 473) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -471) (471 . 472) (461 . 471) (453 . 461) (452 . 454) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -452) (452 . 453) (451 . 453) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -451) (443 . 452) (435 . 443) (#("    " 0 4 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 435) (434 . 444) (433 . 435) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -433) (433 . 434) (432 . 433) (429 . 430) (421 . 429) (420 . 422) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -420) (420 . 421) (419 . 421) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -419) (411 . 420) (408 . 411) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -408) (undo-tree-id857 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg)) . -409) (undo-tree-id858 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -410) (undo-tree-id859 . -1) 411 (408 . 411) (403 . 408) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -403) (undo-tree-id860 . -1) 404 (403 . 404) (399 . 403) (394 . 399) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 394) (undo-tree-id861 . -4) 398 (393 . 398) (t 25335 38667 837346 468000) 392) nil (25335 45041 340971 83000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg delete)) . 435) (undo-tree-id853 . 1) (undo-tree-id854 . -7) 442) nil (25335 45041 340967 135000) 0 nil])
([nil nil ((489 . 490) (482 . 486) (481 . 483) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -481) (481 . 482) (480 . 482) (#("[" 0 1 (ws-butler-chg chg fontified nil)) . -480) (476 . 481) (#("function" 0 8 (ws-butler-chg chg fontified t)) . -476) (undo-tree-id852 . -8) 484 (476 . 484) (474 . 476)) nil (25335 45041 340965 883000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 444) (443 . 444) (442 . 444) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -442) (438 . 443) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -438) (undo-tree-id851 . -1) 439 (432 . 439) (t 25335 38781 293638 4000)) nil (25335 45041 340964 470000) 0 nil])
([nil nil ((438 . 445) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -438) (undo-tree-id849 . -1) (435 . 439) (#("O" 0 1 (fontified t ws-butler-chg chg)) . -435) (undo-tree-id850 . -1) 436 (433 . 436) (t 25335 38804 278484 176000)) nil (25335 45041 340963 178000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . -411) (undo-tree-id848 . -1) 412 (t 25335 38896 73796 255000)) nil (25335 45041 340961 795000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 464) (undo-tree-id846 . 1) (undo-tree-id847 . -1) (463 . 464) (462 . 464) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -462) (455 . 463) (t 25335 38908 26220 209000)) nil (25335 45041 340960 863000) 0 nil])
([nil nil ((444 . 453) (#("." 0 1 (fontified t)) . -455) (undo-tree-id840 . -1) 456 (#("unwrap()" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (rainbow-delimiters-depth-2-face))) . -456) (undo-tree-id841 . -8) (undo-tree-id842 . 1) (undo-tree-id843 . -8) (undo-tree-id844 . 2) (undo-tree-id845 . -7) 464 (t 25335 38930 723021 20000)) nil (25335 45041 340959 230000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t face font-lock-string-face)) . -530) (undo-tree-id832 . -1) (#("]" 0 1 (fontified t face font-lock-string-face)) . -531) (undo-tree-id833 . -1) (undo-tree-id834 . 1) (undo-tree-id835 . -1) 532 (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -526) (undo-tree-id836 . -1) (undo-tree-id837 . 1) (undo-tree-id838 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -527) (undo-tree-id839 . -1) 528 (414 . 420) (408 . 414) (408 . 409) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . 404) (403 . 404) (403 . 404) (t 25335 38940 867377 201000)) nil (25335 45041 340955 222000) 0 nil])
([nil nil ((403 . 411) (#("(" 0 1 (fontified t face (rainbow-delimiters-depth-2-face))) . -403) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . 1) (undo-tree-id826 . -1) 404 (#("funcname, " 0 1 (fontified t) 1 4 (fontified t) 4 10 (fontified t)) . -404) (undo-tree-id827 . -4) (undo-tree-id828 . -10) 414 (#("passes)" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face))) . -414) (undo-tree-id829 . -7) (undo-tree-id830 . 1) (undo-tree-id831 . -7) 421 (t 25335 39019 766113 9000)) nil (25335 45041 340951 896000) 0 nil])
([nil nil ((508 . 510) (#("J" 0 1 (fontified t ws-butler-chg chg face rust-string-interpolation)) . -508) (undo-tree-id821 . -1) (#(":" 0 1 (fontified t ws-butler-chg chg face rust-string-interpolation)) . -509) (undo-tree-id822 . -1) 510 (508 . 510) (t 25335 39149 70482 90000)) nil (25335 45041 340947 989000) 0 nil])
([nil nil ((452 . 453) (445 . 449) (444 . 446) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -444) (444 . 445) (443 . 445) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -443) (443 . 444) (#("]" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 443) (undo-tree-id818 . 1) (undo-tree-id819 . -1) (441 . 443) (440 . 442) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -440) (440 . 441) (437 . 438) (428 . 429) (428 . 437) (427 . 429) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -427) (427 . 428) (420 . 427) (418 . 420) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 417) (416 . 417) (415 . 417) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -415) (415 . 416) (409 . 415) (408 . 410) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -408) (408 . 409) (407 . 409) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -407) (399 . 408) (394 . 399) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 394) (undo-tree-id820 . -4) 398 (393 . 398) (t 25335 39157 726770 190000) 392) nil (25335 45041 340945 674000) 0 nil])
([nil nil ((416 . 418) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -440) (undo-tree-id800 . -1) (undo-tree-id801 . 1) (undo-tree-id802 . -1) (#("0" 0 1 (fontified t face highlight-numbers-number)) . -441) (undo-tree-id803 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -442) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (#("[" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -443) (undo-tree-id806 . -1) (undo-tree-id807 . 1) (undo-tree-id808 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -444) (undo-tree-id809 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -445) (undo-tree-id810 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -446) (undo-tree-id811 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -447) (undo-tree-id812 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -448) (undo-tree-id813 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -449) (undo-tree-id814 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-3-face))) . -450) (undo-tree-id815 . -1) (undo-tree-id816 . 1) (undo-tree-id817 . -1) 451 (t 25335 39194 483988 40000)) nil (25335 45041 340941 106000) 0 nil])
([nil nil ((490 . 495) (#("object" 0 6 (fontified t)) . -490) (undo-tree-id799 . -6) 496 (t 25335 39205 148339 770000)) nil (25335 45041 340933 751000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -458) (undo-tree-id791 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -459) (undo-tree-id792 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -460) (undo-tree-id793 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -461) (undo-tree-id794 . -1) 462 (570 . 574) (569 . 571) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -569) (569 . 570) (568 . 570) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -568) (568 . 569) (#("n" 0 1 (fontified t)) . -568) (undo-tree-id795 . -1) (#("a" 0 1 (fontified t)) . -569) (undo-tree-id796 . -1) (#("m" 0 1 (fontified t)) . -570) (undo-tree-id797 . -1) (#("e" 0 1 (fontified t)) . -571) (undo-tree-id798 . -1) 572 (t 25335 39309 171736 333000)) nil (25335 45041 340932 8000) 0 nil])
([nil nil ((apply -3 395 448 undo--wrap-and-run-primitive-undo 395 448 ((399 . 402) 406)) (t 25335 39331 16442 386000)) nil (25335 45041 340928 972000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face rust-string-interpolation)) . -557) (undo-tree-id789 . -1) (#("?" 0 1 (fontified t face rust-string-interpolation)) . -558) (undo-tree-id790 . -1) 559 (t 25335 39345 40894 481000)) nil (25335 45041 340928 542000) 0 nil])
([nil nil ((368 . 372) (t 25335 39559 139696 159000)) nil (25335 45041 340927 520000) 0 nil])
([nil nil ((706 . 707) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 706) (undo-tree-id774 . 1) (undo-tree-id775 . -1) (705 . 706) (704 . 706) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -704) (704 . 705) (697 . 704) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 697) (undo-tree-id776 . 1) (undo-tree-id777 . -1) (696 . 697) (695 . 697) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -695) (686 . 696) (678 . 684) (677 . 679) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -677) (677 . 678) (#("'" 0 1 (fontified nil ws-butler-chg chg)) . -677) (undo-tree-id778 . -1) (#("'" 0 1 (fontified t ws-butler-chg chg)) . 678) (677 . 679) (#("'" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -677) (677 . 678) (676 . 678) (#("[" 0 1 (ws-butler-chg chg fontified nil)) . -676) (672 . 677) (670 . 672) (#("-" 0 1 (ws-butler-chg chg fontified t)) . -670) (undo-tree-id779 . -1) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -671) (undo-tree-id780 . -1) 672 (670 . 672) (663 . 670) (659 . 663) (650 . 659) (#("        " 0 8 (ws-butler-chg chg fontified t)) . 650) (undo-tree-id781 . -8) 658 (314 . 315) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -314) (undo-tree-id782 . -1) 315 (314 . 319) (313 . 315) (#("<" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -313) (310 . 314) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -310) (undo-tree-id783 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -311) (undo-tree-id784 . -1) 312 (309 . 312) (301 . 309) (278 . 288) (#("ebugou" 0 6 (fontified t ws-butler-chg chg)) . -278) (undo-tree-id785 . -6) 284 (278 . 284) (288 . 291) (283 . 288) (278 . 283) (639 . 643) (639 . 647) (638 . 639) (282 . 286) (281 . 283) (280 . 282) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -280) (280 . 281) (279 . 280) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 279) (278 . 279) (277 . 279) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-function-name-face)) . -277) (274 . 278) (265 . 274) (262 . 265) (261 . 262) (260 . 261) (580 . 588) (580 . 581) (594 . 600) (#("blocks" 0 6 (fontified t ws-butler-chg chg)) . -594) (undo-tree-id786 . -6) 600 (600 . 602) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -600) (600 . 601) (#("9" 0 1 (fontified t ws-butler-chg chg)) . -600) (undo-tree-id787 . -1) (#("0" 0 1 (fontified t ws-butler-chg chg)) . -601) (undo-tree-id788 . -1) 602 (588 . 602) (579 . 588) (t 25335 39586 388550 428000) 535) nil (25335 45041 340923 372000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 324) 706) nil (25335 45041 340914 144000) 0 nil])
([nil nil ((740 . 746) (738 . 740) (t 25335 39739 361309 467000)) nil (25335 45041 340913 874000) 0 nil])
([nil nil ((747 . 748) (t 25335 39743 709443 939000)) nil (25335 45041 340913 553000) 0 nil])
([nil nil ((404 . 408) (403 . 405) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -403) (403 . 404) (402 . 404) (#("[" 0 1 (ws-butler-chg chg fontified nil)) . -402) (402 . 403) (#("," 0 1 (ws-butler-chg chg fontified t)) . -402) (undo-tree-id762 . -1) 403 (402 . 403) (403 . 404) (362 . 370) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 362) (undo-tree-id763 . -4) 366 (399 . 404) (399 . 400) (#("{" 0 1 (ws-butler-chg chg fontified nil face (rainbow-delimiters-depth-2-face))) . 361) (360 . 361) (360 . 361) (#("{" 0 1 (ws-butler-chg chg fontified nil face (rainbow-delimiters-depth-2-face))) . -398) (398 . 399) (359 . 360) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 359) (358 . 359) (357 . 359) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -357) (352 . 358) (#(")" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-mismatched-face))) . -352) (undo-tree-id764 . -1) (undo-tree-id765 . 1) (undo-tree-id766 . -1) 353 (341 . 353) (338 . 341) (333 . 338) (329 . 333) (324 . 329) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 324) (undo-tree-id767 . -4) 328 (324 . 328) (324 . 329) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 324) (undo-tree-id768 . -2) (undo-tree-id769 . -4) 328 (354 . 360) (349 . 351) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -349) (349 . 350) (#("P" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -352) (undo-tree-id770 . -1) 353 (352 . 353) (350 . 352) (338 . 340) (342 . 347) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -342) (undo-tree-id771 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -343) (undo-tree-id772 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -344) (undo-tree-id773 . -1) 345 (338 . 345) (337 . 339) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -337) (337 . 338) (336 . 338) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -336) (328 . 337) (324 . 328) (t 25335 39745 245491 432000)) nil (25335 45041 340909 916000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 400) (t 25335 39847 364638 244000)) nil (25335 45041 340903 804000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t ws-butler-chg delete)) . 400)) nil (25335 45041 340903 444000) 0 nil])
([nil nil ((477 . 478) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 477) (476 . 477) (475 . 477) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -475) (468 . 476) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 468) (467 . 468) (466 . 468) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -466) (458 . 467) (457 . 458) (455 . 456) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 449) (448 . 449) (448 . 449) (448 . 454) (447 . 449) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -447) (447 . 448) (445 . 446) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 442) (441 . 442) (441 . 442) (441 . 444) (440 . 442) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -440) (436 . 441) (#("il" 0 2 (fontified t ws-butler-chg chg)) . -436) (undo-tree-id752 . -2) 438 (#("e" 0 1 (fontified t ws-butler-chg chg)) . -438) (undo-tree-id753 . -1) 439 (438 . 439) (436 . 438) (435 . 436) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -433) (undo-tree-id754 . -1) 434 (429 . 434) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -429) (undo-tree-id755 . -1) 430 (427 . 430) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -427) (undo-tree-id756 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -428) (undo-tree-id757 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -429) (undo-tree-id758 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -430) (undo-tree-id759 . -1) 431 (432 . 434) (427 . 432) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -427) (undo-tree-id760 . -1) 428 (424 . 428) (420 . 424) (411 . 420) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 411) (undo-tree-id761 . -8) 419 (410 . 419) (t 25335 39860 145030 714000) 400) nil (25335 45041 340900 278000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg delete)) . 478) (undo-tree-id751 . 1) 477) nil (25335 45041 340893 455000) 0 nil])
([nil nil ((510 . 519) (500 . 510) (501 . 502) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 501) (500 . 501) (499 . 501) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -499) (493 . 500) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -493) (undo-tree-id749 . -1) (#("b" 0 1 (fontified t ws-butler-chg chg)) . -494) (undo-tree-id750 . -1) 495 (487 . 495) (478 . 487) (t 25335 40048 675370 842000) 477) nil (25335 45041 340892 292000) 0 nil])
([nil nil ((277 . 279) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-function-name-face)) . -277) (273 . 278) (265 . 273) (262 . 265) (261 . 262) (260 . 261) (t 25335 40080 301067 994000)) nil (25335 45041 340890 970000) 0 nil])
([nil nil ((#("fn parse_blocks()
" 0 2 (fontified t ws-butler-chg chg face font-lock-keyword-face) 2 3 (fontified t ws-butler-chg chg) 3 15 (fontified t ws-butler-chg chg face font-lock-function-name-face) 15 16 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face)) 16 17 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face)) 17 18 (fontified t ws-butler-chg delete)) . 262) (undo-tree-id743 . 2) (undo-tree-id744 . -15) (undo-tree-id745 . 3) (undo-tree-id746 . -16) (undo-tree-id747 . 2) (undo-tree-id748 . -17) 277) nil (25335 45041 340890 329000) 0 nil])
([nil nil ((263 . 325)) nil (25335 45041 340888 295000) 0 nil])
([nil nil ((272 . 278) (#("passes" 0 6 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -272) (undo-tree-id740 . -6) 278 (327 . 328) (326 . 327) (#("    " 0 4 (fontified t ws-butler-chg chg)) . -326) (undo-tree-id741 . -4) 330 (325 . 330) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 325) (undo-tree-id742 . -4) 329 (324 . 329) 263) nil (25335 45041 340887 333000) 0 nil])
([nil nil ((406 . 412) (405 . 407) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -405) (405 . 406) (404 . 406) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -404) (404 . 405) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -404) (undo-tree-id730 . -1) 405 (400 . 405) (399 . 400) (397 . 399) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 396) (undo-tree-id731 . 1) (undo-tree-id732 . -1) (395 . 396) (394 . 396) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -394) (393 . 395) (388 . 393) (384 . 388) (382 . 384) (381 . 383) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -381) (381 . 382) (380 . 382) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -380) (372 . 381) (364 . 372) (#("    " 0 4 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 364) (363 . 373) (362 . 364) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -362) (362 . 363) (361 . 362) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -361) (undo-tree-id733 . -1) 362 (361 . 362) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 361) (360 . 361) (359 . 361) (#("(" 0 1 (ws-butler-chg chg fontified nil)) . -359) (354 . 360) (#(")" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-mismatched-face))) . -354) (undo-tree-id734 . -1) (undo-tree-id735 . 1) (undo-tree-id736 . -1) 355 (352 . 355) (#("o" 0 1 (ws-butler-chg chg fontified t)) . -352) (undo-tree-id737 . -1) 353 (352 . 353) (348 . 352) (302 . 308) (#("passes" 0 6 (fontified t face font-lock-variable-name-face)) . -302) (undo-tree-id738 . -6) 308 (343 . 348) (342 . 343) (340 . 342) (334 . 340) (330 . 334) (325 . 330) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 325) (undo-tree-id739 . -4) 329 (324 . 329) (t 25335 40103 262276 513000) 277) nil (25335 45041 340883 235000) 0 nil])
([nil nil ((415 . 416) (t 25335 40172 425805 624000)) nil (25335 45041 340860 61000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . -417) (undo-tree-id729 . -8) 425 (416 . 425) (t 25335 40173 921880 228000) 415) nil (25335 45041 340859 740000) 0 nil])
([nil nil ((#("    // println!(\"adsf: {:?}\", iondata[\"functions\"]);
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 15 (fontified t face font-lock-comment-face) 15 16 (fontified t face font-lock-comment-face) 16 23 (fontified t face font-lock-comment-face) 23 24 (fontified t face font-lock-comment-face) 24 26 (fontified t face font-lock-comment-face) 26 27 (fontified t face font-lock-comment-face) 27 28 (fontified t face font-lock-comment-face) 28 37 (fontified t face font-lock-comment-face) 37 38 (fontified t face font-lock-comment-face) 38 39 (fontified t face font-lock-comment-face) 39 48 (fontified t face font-lock-comment-face) 48 49 (fontified t face font-lock-comment-face) 49 50 (fontified t face font-lock-comment-face) 50 51 (fontified t face font-lock-comment-face) 51 52 (fontified t face font-lock-comment-face) 52 53 (fontified t face font-lock-comment-face)) . 834) (undo-tree-id728 . -14)) nil (25335 45041 340858 688000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 833) (undo-tree-id727 . -1)) nil (25335 45041 340858 57000) 0 nil])
([nil nil ((nil rear-nonsticky nil 425 . 426) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -527) (417 . 528) (t 25335 40216 747986 910000)) nil (25335 45041 340857 245000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 1) (529 . 530) (apply deactivate-cursor-after-undo 1) (441 . 442) (apply activate-cursor-for-undo 1) (527 . 528) (apply deactivate-cursor-after-undo 1) (440 . 441) (apply activate-cursor-for-undo 1) (525 . 526) (apply deactivate-cursor-after-undo 1) (439 . 440) (apply activate-cursor-for-undo 1) (523 . 524) (apply deactivate-cursor-after-undo 1) (438 . 439) (apply activate-cursor-for-undo 1) (521 . 522) (apply deactivate-cursor-after-undo 1) (437 . 438) (apply activate-cursor-for-undo 1) (519 . 520) (apply deactivate-cursor-after-undo 1) (436 . 437) (apply activate-cursor-for-undo 1) (517 . 518) (apply deactivate-cursor-after-undo 1) (435 . 436) (apply activate-cursor-for-undo 1) (515 . 516) (apply deactivate-cursor-after-undo 1) (434 . 435) (apply activate-cursor-for-undo 1) (513 . 514) (apply deactivate-cursor-after-undo 1) (433 . 434) (apply activate-cursor-for-undo 1) (511 . 512) (apply deactivate-cursor-after-undo 1) (432 . 433) (apply activate-cursor-for-undo 1) (509 . 510) (apply deactivate-cursor-after-undo 1) (431 . 432) (apply activate-cursor-for-undo 1) (507 . 508) (#("mirblocks" 0 9 (ws-butler-chg chg fontified t)) . 507) (undo-tree-id711 . -9) (apply deactivate-cursor-after-undo 1) (430 . 431) (#("mirblocks" 0 9 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . 430) (undo-tree-id712 . -9) (undo-tree-id713 . 9) (undo-tree-id714 . -9) (nil ws-butler-chg delete 439 . 440) (430 . 439) (#("inst" 0 4 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . 430) (undo-tree-id715 . -4) (430 . 434) (#("mirblocks" 0 9 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -430) (undo-tree-id716 . -9) 439 (448 . 460) (#("blocks" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face) 1 6 (fontified t ws-butler-chg chg face font-lock-string-face)) . -448) (undo-tree-id717 . -6) 454 (#("[" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -446) (undo-tree-id718 . -1) (#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -447) (undo-tree-id719 . -1) (#("m" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -448) (undo-tree-id720 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -449) (undo-tree-id721 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -450) (undo-tree-id722 . -1) (#("\"" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -451) (undo-tree-id723 . -1) (#("]" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -452) (undo-tree-id724 . -1) (undo-tree-id725 . 1) (undo-tree-id726 . -1) 453) nil (25335 45041 340854 901000) 0 nil])
([nil nil ((#("blocks" 0 6 (fontified t)) . 501) (t 25335 40975 579486 810000)) nil (25335 45041 340846 315000) 0 nil])
([nil nil ((501 . 513)) nil (25335 45041 340846 64000) 0 nil])
([nil nil ((nil rear-nonsticky nil 261 . 262) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -323) (261 . 324) (t 25335 40983 427778 417000)) nil (25335 45041 340845 723000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil ws-butler-chg chg)) . -324) (undo-tree-id710 . -4) (328 . 329) (323 . 328) (t 25335 40988 319959 975000)) nil (25335 45041 340845 122000) 0 nil])
([nil nil ((#("blocks" 0 6 (fontified t face font-lock-function-name-face)) . 271) (t 25335 40991 148064 863000)) nil (25335 45041 340844 241000) 0 nil])
([nil nil ((317 . 319) (307 . 317) (#("blocks" 0 6 (fontified t face font-lock-variable-name-face)) . -307) (undo-tree-id705 . -6) 313 (280 . 283) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -280) (undo-tree-id706 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -281) (undo-tree-id707 . -1) 282 (281 . 282) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -281) (undo-tree-id708 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-function-name-face)) . -282) (undo-tree-id709 . -1) 283 (277 . 283) (271 . 277)) nil (25335 45041 340843 309000) 0 nil])
([nil nil ((381 . 389) (#("    " 0 4 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 381) (380 . 390) (379 . 381) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -379) (379 . 380) (378 . 379) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 378) (undo-tree-id701 . 1) (undo-tree-id702 . -1) (377 . 378) (376 . 378) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -376) (371 . 377) (366 . 371) (354 . 366) (#("instr" 0 5 (fontified t ws-butler-chg chg)) . -354) (undo-tree-id703 . -5) 359 (354 . 359) (351 . 354) (345 . 351) (341 . 345) (336 . 341) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 336) (undo-tree-id704 . -4) 340 (335 . 340) (t 25335 41011 356812 922000) 318) nil (25335 45041 340839 632000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . 381) (undo-tree-id700 . -7) 388) nil (25335 45041 340836 836000) 0 nil])
([nil nil ((381 . 389) (t 25335 41024 85282 819000)) nil (25335 45041 340836 295000) 0 nil])
([nil nil ((nil rear-nonsticky nil 397 . 398) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -442) (389 . 443) 388) nil (25335 45041 340835 915000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg chg)) . 381) (undo-tree-id698 . -7) (undo-tree-id699 . -9) 388) nil (25335 45041 340835 444000) 0 nil])
([nil nil ((444 . 445) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 438) (437 . 438) (437 . 438) (437 . 443) (436 . 438) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -436) (436 . 437) (#("{" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -436) (undo-tree-id689 . -1) (undo-tree-id690 . 1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (#("}" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 437) (undo-tree-id693 . 1) (undo-tree-id694 . -1) (436 . 438) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -436) (434 . 437) (431 . 434) (429 . 431) (425 . 427) (#("number" 0 6 (fontified t ws-butler-chg chg face font-lock-string-face)) . -425) (undo-tree-id695 . -6) 431 (418 . 423) (#("block" 0 5 (fontified t ws-butler-chg chg)) . -418) (undo-tree-id696 . -5) 423 (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 415) (414 . 415) (413 . 415) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -413) (413 . 414) (411 . 413) (#("Block#" 0 6 (fontified t ws-butler-chg chg face font-lock-string-face)) . -409) (undo-tree-id697 . -6) 415 (405 . 409)) nil (25335 45041 340833 149000) 0 nil])
([nil nil ((642 . 645) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -642) (undo-tree-id686 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -643) (undo-tree-id687 . -1) 644 (640 . 644) (#("pass" 0 4 (fontified t)) . -640) (undo-tree-id688 . -4) 644 (t 25335 41103 292186 107000)) nil (25335 45041 340827 889000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg)) . 464) (463 . 464) (462 . 464) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -462) (455 . 463) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 455) (454 . 455) (453 . 455) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -453) (446 . 454) (t 25335 41118 496739 613000)) nil (25335 45041 340825 976000) 0 nil])
([nil nil ((1256 . 1257) (1248 . 1259) (1248 . 1254) (#("println" 0 7 (fontified t face rust-builtin-formatting-macro)) . -1248) (undo-tree-id685 . -7) 1255 (t 25335 41200 611709 963000)) nil (25335 45041 340824 693000) 0 nil])
([nil nil ((1260 . 1261) (t 25335 41684 732766 135000)) nil (25335 45041 340823 862000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 3) (609 . 610) (apply deactivate-cursor-after-undo 3) (apply activate-cursor-for-undo 4) (906 . 907) (apply deactivate-cursor-after-undo 4) (401 . 402) (apply activate-cursor-for-undo 4) (904 . 905) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (607 . 608) (apply deactivate-cursor-after-undo 3) (400 . 401) (apply activate-cursor-for-undo 4) (901 . 902) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (605 . 606) (apply deactivate-cursor-after-undo 3) (399 . 400) (apply activate-cursor-for-undo 4) (898 . 899) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (603 . 604) (apply deactivate-cursor-after-undo 3) (398 . 399) (apply activate-cursor-for-undo 4) (895 . 896) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (601 . 602) (apply deactivate-cursor-after-undo 3) (397 . 398) (apply activate-cursor-for-undo 4) (892 . 893) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (599 . 600) (apply deactivate-cursor-after-undo 3) (396 . 397) (apply activate-cursor-for-undo 4) (889 . 890) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (597 . 598) (apply deactivate-cursor-after-undo 3) (395 . 396) (apply activate-cursor-for-undo 4) (886 . 887) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (595 . 596) (apply deactivate-cursor-after-undo 3) (394 . 395) (apply activate-cursor-for-undo 4) (883 . 884) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (593 . 594) (apply deactivate-cursor-after-undo 3) (393 . 394) (apply activate-cursor-for-undo 4) (880 . 881) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (591 . 592) (apply deactivate-cursor-after-undo 3) (392 . 393) (apply activate-cursor-for-undo 4) (877 . 878) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (589 . 590) (apply deactivate-cursor-after-undo 3) (391 . 392) (apply activate-cursor-for-undo 4) (874 . 875) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (587 . 588) (apply deactivate-cursor-after-undo 3) (390 . 391) (apply activate-cursor-for-undo 3) (585 . 586) (apply deactivate-cursor-after-undo 3) (apply activate-cursor-for-undo 4) (870 . 871) (apply deactivate-cursor-after-undo 4) (389 . 390) (apply activate-cursor-for-undo 4) (874 . 875) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (589 . 590) (apply deactivate-cursor-after-undo 3) (394 . 395) (apply activate-cursor-for-undo 4) (871 . 872) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (587 . 588) (apply deactivate-cursor-after-undo 3) (393 . 394) (apply activate-cursor-for-undo 4) (868 . 869) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (585 . 586) (apply deactivate-cursor-after-undo 3) (392 . 393) (apply activate-cursor-for-undo 4) (865 . 866) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (583 . 584) (apply deactivate-cursor-after-undo 3) (391 . 392) (apply activate-cursor-for-undo 4) (862 . 863) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (581 . 582) (apply deactivate-cursor-after-undo 3) (390 . 391) (apply activate-cursor-for-undo 4) (859 . 860) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (579 . 580) (apply deactivate-cursor-after-undo 3) (389 . 390) (apply activate-cursor-for-undo 4) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -857) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -578) (apply deactivate-cursor-after-undo 3) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -389) (undo-tree-id681 . -1) 390 (apply activate-cursor-for-undo 4) (859 . 860) (#("println" 0 1 (fontified t face rust-builtin-formatting-macro) 1 7 (fontified t face rust-builtin-formatting-macro)) . 859) (undo-tree-id682 . -7) (apply deactivate-cursor-after-undo 4) (apply activate-cursor-for-undo 3) (579 . 580) (#("println" 0 7 (fontified t face rust-builtin-formatting-macro)) . 579) (undo-tree-id683 . -7) (apply deactivate-cursor-after-undo 3) (389 . 390) (#("println" 0 7 (fontified t face rust-builtin-formatting-macro)) . 389) (undo-tree-id684 . -7) (t 25335 41691 404997 457000)) nil (25335 45041 340821 46000) 0 nil])
([nil nil ((1499 . 1508) (1532 . 1533) (1524 . 1530) (#("to " 0 3 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1524) (undo-tree-id676 . -3) 1527 (1524 . 1527) (1518 . 1524) (1515 . 1518) (1508 . 1515) (1507 . 1509) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -1507) (1507 . 1508) (#("msg: &str" 0 3 (fontified t ws-butler-chg chg face font-lock-variable-name-face) 3 5 (fontified t ws-butler-chg chg) 5 6 (fontified t ws-butler-chg chg face rust-ampersand-face) 6 9 (fontified t ws-butler-chg chg face font-lock-type-face)) . 1507) (undo-tree-id677 . -9) (1500 . 1517) (#("expe" 0 4 (fontified t ws-butler-chg chg)) . -1500) (undo-tree-id678 . -4) 1504 (1499 . 1504) (1490 . 1498) (1488 . 1490) (1482 . 1487) (1479 . 1482) (1474 . 1479) (1473 . 1475) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . -1473) (1473 . 1474) (1472 . 1474) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1472) (1458 . 1473) (#("write" 0 5 (fontified t ws-butler-chg chg)) . -1458) (undo-tree-id679 . -5) 1463 (1458 . 1463) (1453 . 1458) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 1453) (undo-tree-id680 . -4) 1457 (1452 . 1457) (t 25335 41716 9849 879000) 1451) nil (25335 45041 340811 578000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t face rust-ampersand-face)) . 907) (t 25335 41787 108307 997000)) nil (25335 45041 340807 300000) 0 nil])
([nil nil ((369 . 370) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 369) (368 . 369) (367 . 369) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -367) (365 . 368) (360 . 365) (#("g" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -360) (undo-tree-id670 . -1) 361 (360 . 361) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -360) (undo-tree-id671 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -361) (undo-tree-id672 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -362) (undo-tree-id673 . -1) (#(":" 0 1 (fontified t ws-butler-chg chg)) . -363) (undo-tree-id674 . -1) 364 (356 . 364) (354 . 356) (345 . 354) (341 . 345) (336 . 341) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 336) (undo-tree-id675 . -4) 340 (335 . 340) (t 25335 41813 129205 942000) 282) nil (25335 45041 340805 887000) 0 nil])
([nil nil ((337 . 341) (#(" " 0 1 (ws-butler-chg chg fontified nil)) . 337) (336 . 337) (343 . 344) (#("(" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . -343) (undo-tree-id665 . -1) (#(")" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . -344) (undo-tree-id666 . -1) (undo-tree-id667 . 1) (undo-tree-id668 . -1) 345 (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 345) (344 . 345) (343 . 345) (#("(" 0 1 (ws-butler-chg chg fontified nil face font-lock-type-face)) . -343) (337 . 344) (#("s" 0 1 (ws-butler-chg chg fontified t)) . -337) (undo-tree-id669 . -1) 338 (337 . 338) (334 . 337) (t 25335 41877 927438 366000)) nil (25335 45041 340801 750000) 0 nil])
([nil nil ((333 . 356) (#(" " 0 1 (fontified t)) . 333) (undo-tree-id664 . -1) 334 (t 25335 41885 467697 821000)) nil (25335 45041 340798 393000) 0 nil])
([nil nil ((nil fontified nil 358 . 359) (358 . 359) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil)) . 358) (#("
" 0 1 (fontified t)) . -358) 371) nil (25335 45041 340797 311000) 0 nil])
([nil nil ((#("debugout: &" 0 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 11 (fontified t face rust-ampersand-face)) . -284) (undo-tree-id660 . -11) 295 (#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -295) (undo-tree-id661 . -4) 299 (#("String, " 0 6 (fontified t face font-lock-type-face) 6 8 (fontified t)) . -299) (undo-tree-id662 . -8) 307 (557 . 565) (552 . 557) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 552) (undo-tree-id663 . -4) 556 (551 . 556) (t 25335 41890 851883 50000) 550) nil (25335 45041 340795 618000) 0 nil])
([nil nil ((#("debugout: &" 0 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 11 (fontified t face rust-ampersand-face)) . -562) (undo-tree-id650 . -11) 573 (#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -573) (undo-tree-id651 . -4) 577 (#("String, " 0 6 (fontified t face font-lock-type-face) 6 8 (fontified t)) . -577) (undo-tree-id652 . -8) 585 (631 . 632) (605 . 622) (#(" " 0 1 (fontified t)) . 605) (undo-tree-id653 . -1) 606 (614 . 615) (609 . 614) (607 . 609) (#("<" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . -607) (undo-tree-id654 . -1) (undo-tree-id655 . 1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (#(">" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 608) (undo-tree-id658 . 1) (undo-tree-id659 . -1) (607 . 609) (#("<" 0 1 (fontified nil ws-butler-chg chg)) . -607) (606 . 608) (t 25335 41900 824226 34000)) nil (25335 45041 340792 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 615 . 616) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -645) (611 . 646)) nil (25335 45041 340787 72000) 0 nil])
([nil nil ((645 . 650) 616) nil (25335 45041 340786 671000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -949) (undo-tree-id649 . -4) 953 (948 . 953) 887) nil (25335 45041 340786 230000) 0 nil])
([nil nil ((nil rear-nonsticky nil 953 . 954) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -983) (949 . 984)) nil (25335 45041 340785 458000) 0 nil])
([nil nil ((950 . 956) (947 . 950) (946 . 947)) nil (25335 45041 340785 158000) 0 nil])
([nil nil ((582 . 583) (#("                " 0 1 (ws-butler-chg delete fontified nil) 1 16 (ws-butler-chg chg fontified nil)) . 582) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -582) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 583) nil (25335 45041 340784 677000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . 630) 582) nil (25335 45041 340783 364000) 0 nil])
([nil nil ((310 . 311) (#("                      " 0 1 (fontified nil ws-butler-chg delete) 1 22 (fontified nil)) . 310) (#("
" 0 1 (fontified t)) . -310) 294 (t 25335 41937 921501 22000)) nil (25335 45041 340783 34000) 0 nil])
([nil nil ((nil rear-nonsticky nil 845 . 846) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -854) (841 . 855) (t 25335 41942 197647 901000)) nil (25335 45041 340782 613000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1183 . 1184) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -1192) (1179 . 1193) 1178) nil (25335 45041 340782 62000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -1180) (undo-tree-id645 . -4) 1184 (1180 . 1184) (1180 . 1181) 1184) nil (25335 45041 340781 561000) 0 nil])
([nil nil ((1148 . 1151) (1142 . 1148) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -1142) (undo-tree-id642 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -1143) (undo-tree-id643 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -1144) (undo-tree-id644 . -1) 1145 (1139 . 1145) (t 25335 41952 878014 658000)) nil (25335 45041 340780 289000) 0 nil])
([nil nil ((1151 . 1152)) nil (25335 45041 340778 746000) 0 nil])
([nil nil ((1023 . 1024) (t 25335 41967 130503 926000)) nil (25335 45041 340778 505000) 0 nil])
([nil nil ((803 . 804) (800 . 803) (791 . 800) (t 25335 41975 266783 138000)) nil (25335 45041 340778 84000) 0 nil])
([nil nil ((1578 . 1579) (1575 . 1578) (1569 . 1575) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -1569) (undo-tree-id639 . -1) (#("u" 0 1 (fontified t ws-butler-chg chg)) . -1570) (undo-tree-id640 . -1) (#("g" 0 1 (fontified t ws-butler-chg chg)) . -1571) (undo-tree-id641 . -1) 1572 (1566 . 1572) (t 25335 41988 859249 467000)) nil (25335 45041 340777 173000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 6) (#("debugout, " 0 10 (fontified t)) . 1169) (undo-tree-id634 . -10) (apply deactivate-cursor-after-undo 6) (#("debugout, " 0 10 (fontified t)) . 823) (undo-tree-id635 . -10) (#("&" 0 1 (fontified t face rust-ampersand-face)) . -1592) (undo-tree-id636 . -1) 1593 (#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -1593) (undo-tree-id637 . -4) 1597 (#("debugout, " 0 8 (fontified t) 8 10 (fontified t)) . -1597) (undo-tree-id638 . -10) 1607 (t 25335 42000 219639 89000)) nil (25335 45041 340774 798000) 0 nil])
([nil nil ((#("debugout: &" 0 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 11 (fontified t face rust-ampersand-face)) . -877) (undo-tree-id631 . -11) 888 (#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . -888) (undo-tree-id632 . -4) 892 (#("String, " 0 6 (fontified t face font-lock-type-face) 6 8 (fontified t)) . -892) (undo-tree-id633 . -8) 900 (t 25335 42015 856175 174000)) nil (25335 45041 340770 820000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 9) (930 . 931) (apply deactivate-cursor-after-undo 9) (apply activate-cursor-for-undo 8) (589 . 590) (apply deactivate-cursor-after-undo 8) (335 . 336) (apply activate-cursor-for-undo 9) (927 . 928) (apply deactivate-cursor-after-undo 9) (apply activate-cursor-for-undo 8) (587 . 588) (apply deactivate-cursor-after-undo 8) (334 . 335) (apply activate-cursor-for-undo 9) (924 . 925) (apply deactivate-cursor-after-undo 9) (apply activate-cursor-for-undo 8) (585 . 586) (apply deactivate-cursor-after-undo 8) (333 . 334) (apply activate-cursor-for-undo 8) (583 . 584) (apply deactivate-cursor-after-undo 8) (apply activate-cursor-for-undo 9) (920 . 921) (apply deactivate-cursor-after-undo 9) (332 . 333) (t 25335 42023 108423 733000)) nil (25335 45041 340769 197000) 0 nil])
([nil nil ((453 . 455) (699 . 701) (t 25335 42037 60901 820000)) nil (25335 45041 340767 795000) 0 nil])
([nil nil ((1457 . 1459) (1042 . 1044)) nil (25335 45041 340767 494000) 0 nil])
([nil nil ((1044 . 1046) (t 25335 42085 782591 135000)) nil (25335 45041 340767 244000) 0 nil])
([nil nil ((1461 . 1465) (t 25335 42166 453471 578000)) nil (25335 45041 340766 913000) 0 nil])
([nil nil ((1029 . 1033) (t 25335 42172 573689 291000)) nil (25335 45041 340766 592000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . -1463) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1464) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -1465) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1466) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -1467) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1468) (undo-tree-id630 . -1) 1469 (t 25335 42185 354143 569000)) nil (25335 45041 340765 360000) 0 nil])
([nil nil ((449 . 451) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . -449) (449 . 450) (#(">" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation syntax-table (1))) . -449) (448 . 450) (t 25335 42208 326958 934000)) nil (25335 45041 340761 423000) 0 nil])
([nil nil ((449 . 450) (t 25335 44218 935935 178000)) nil (25335 45041 340760 671000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg)) . 491) (490 . 491) (489 . 491) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -489) (489 . 490) (482 . 489) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 482) (481 . 482) (480 . 482) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -480) (478 . 481) (#("w" 0 1 (fontified t ws-butler-chg chg)) . -478) (undo-tree-id616 . -1) (#("e" 0 1 (fontified nil ws-butler-chg chg)) . -479) (undo-tree-id617 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -480) (undo-tree-id618 . -1) 481 (476 . 481) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -476) (undo-tree-id619 . -1) 477 (473 . 477) (t 25335 44270 949606 21000)) nil (25335 45041 340759 68000) 0 nil])
([nil nil ((453 . 454) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 453) (452 . 453) (451 . 453) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -451) (444 . 452) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 444) (443 . 444) (442 . 444) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -442) (435 . 443) (431 . 433) (430 . 432) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -430) (430 . 431) (#(":" 0 1 (fontified t ws-butler-chg chg)) . -430) (undo-tree-id613 . -1) 431 (430 . 431) (#("'" 0 1 (fontified nil ws-butler-chg chg)) . -430) (undo-tree-id614 . -1) (#("'" 0 1 (fontified t ws-butler-chg chg)) . 431) (430 . 432) (#("'" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -430) (430 . 431) (429 . 431) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -429) (426 . 430) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -426) (undo-tree-id615 . -1) 427 (424 . 427) (422 . 424) (419 . 422) (415 . 419) (406 . 415) (t 25335 44404 5916 668000) 405) nil (25335 45041 340754 970000) 0 nil])
([nil nil ((#("instr[\"" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-4-face)) 6 7 (fontified t face font-lock-string-face)) . -509) (undo-tree-id569 . -7) 516 (#("\"" 0 1 (fontified t face font-lock-string-face)) . -518) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (#("]" 0 1 (fontified t face (rainbow-delimiters-depth-4-face))) . -519) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . 1) (undo-tree-id583 . -1) (#("." 0 1 (fontified t)) . -520) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) 521 (#("as_" 0 3 (fontified t)) . -521) (undo-tree-id590 . -3) (undo-tree-id591 . -3) (undo-tree-id592 . -3) (undo-tree-id593 . -3) (undo-tree-id594 . -3) (undo-tree-id595 . -3) 524 (#("u64()." 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-4-face)) 4 5 (fontified t face (rainbow-delimiters-depth-4-face)) 5 6 (fontified t)) . -524) (undo-tree-id596 . -6) (undo-tree-id597 . -6) (undo-tree-id598 . -6) (undo-tree-id599 . -6) (undo-tree-id600 . -6) (undo-tree-id601 . -6) 530 (#("unwrap()" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 8 (fontified t face (rainbow-delimiters-depth-4-face))) . -530) (undo-tree-id602 . -7) (undo-tree-id603 . -7) (undo-tree-id604 . -7) (undo-tree-id605 . -7) (undo-tree-id606 . -7) (undo-tree-id607 . -8) (undo-tree-id608 . 1) (undo-tree-id609 . -8) (undo-tree-id610 . 2) (undo-tree-id611 . -7) 538 (#("0" 0 1 (fontified t face rust-string-interpolation)) . -497) (undo-tree-id612 . -1) 498 (t 25335 44435 338938 411000)) nil (25335 45041 340750 442000) 0 nil])
([nil nil ((#(" instr[\"opcode\"].as_str().unwrap()" 0 1 (fontified t) 1 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-4-face)) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 16 (fontified t face (rainbow-delimiters-depth-4-face)) 16 17 (fontified t) 17 23 (fontified t) 23 24 (fontified t face (rainbow-delimiters-depth-4-face)) 24 25 (fontified t face (rainbow-delimiters-depth-4-face)) 25 32 (fontified t) 32 33 (fontified t face (rainbow-delimiters-depth-4-face)) 33 34 (fontified t face (rainbow-delimiters-depth-4-face))) . 512) (undo-tree-id566 . -34) (undo-tree-id567 . 33) (undo-tree-id568 . -34) (t 25335 44446 275295 557000)) nil (25335 45041 340734 50000) 0 nil])
([nil nil ((474 . 476) (467 . 474) (465 . 467) (#("r" 0 1 (fontified t ws-butler-chg chg)) . -465) (undo-tree-id563 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -466) (undo-tree-id564 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -467) (undo-tree-id565 . -1) 468 (463 . 468) (454 . 463) 453) nil (25335 45041 340732 417000) 0 nil])
([nil nil ((nil rear-nonsticky nil 509 . 510) (nil fontified nil 476 . 510) (476 . 510) 475) nil (25335 45041 340730 624000) 0 nil])
([nil nil ((573 . 579) (572 . 573) (425 . 426) (424 . 425) (423 . 424) (422 . 423) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -476) (undo-tree-id562 . -1) 477 (510 . 511)) nil (25335 45041 340729 932000) 0 nil])
([nil nil ((471 . 482) (#("opcode" 0 6 (fontified t face font-lock-variable-name-face)) . -471) (undo-tree-id561 . -6) 477 (514 . 523) (t 25335 44471 824130 915000) 467) nil (25335 45041 340729 71000) 0 nil])
([nil nil ((585 . 586) (582 . 583) (581 . 583) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -581) (581 . 582) (580 . 582) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -580) (572 . 581) (569 . 572) (558 . 569) (#("ins" 0 3 (fontified t ws-butler-chg chg)) . -558) (undo-tree-id559 . -3) 561 (558 . 561) (556 . 558) (555 . 556) (546 . 553) (544 . 546) (544 . 545) (#("(" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 538) (537 . 538) (537 . 538) (532 . 536) (539 . 540) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . 533) (532 . 533) (532 . 533) (535 . 538) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -535) (undo-tree-id560 . -1) 536 (532 . 536) (531 . 532) (528 . 531) (519 . 528) 481) nil (25335 45041 340727 378000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 587) 585) nil (25335 45041 340724 672000) 0 nil])
([nil nil ((661 . 668) (#("ope" 0 3 (fontified t ws-butler-chg chg)) . -661) (undo-tree-id547 . -3) 664 (661 . 664) (659 . 661) (653 . 659) (#("op" 0 2 (fontified t ws-butler-chg chg)) . -653) (undo-tree-id548 . -2) 655 (#("e" 0 1 (fontified t ws-butler-chg chg)) . -655) (undo-tree-id549 . -1) 656 (653 . 656) (#("opcode" 0 6 (fontified t)) . -653) (undo-tree-id550 . -5) (undo-tree-id551 . -5) (undo-tree-id552 . -5) (undo-tree-id553 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id556 . -5) (undo-tree-id557 . -6) (undo-tree-id558 . -5) 659 (636 . 640) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 640) (639 . 640) (638 . 640) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -638) (638 . 639) (637 . 638) (t 25335 44835 44128 193000)) nil (25335 45041 340723 210000) 0 nil])
([nil nil ((572 . 573) (#("k" 0 1 (fontified t)) . 572) (t 25335 44862 645046 869000)) nil (25335 45041 340717 849000) 0 nil])
([nil nil ((618 . 624) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -618) (undo-tree-id533 . -1) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -619) (undo-tree-id534 . -1) 620 (617 . 620) (615 . 617) (615 . 616) (#("(" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 609) (608 . 609) (608 . 609) (608 . 614) (607 . 609) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -607) (603 . 608) (591 . 603) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 591) (590 . 608) (589 . 591) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -589) (589 . 590) (588 . 589) (#(";" 0 1 (fontified t)) . -588) (undo-tree-id535 . -1) 589 (560 . 561) (#("j" 0 1 (fontified t ws-butler-chg chg)) . -560) (undo-tree-id536 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -561) (undo-tree-id537 . -1) 562 (560 . 562) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -560) (undo-tree-id538 . -1) (558 . 561) (#("h" 0 1 (fontified t ws-butler-chg chg)) . -558) (undo-tree-id539 . -1) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -559) (undo-tree-id540 . -1) 560 (559 . 560) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -559) (undo-tree-id541 . -1) 560 (555 . 560) (#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -552) (undo-tree-id542 . -1) (undo-tree-id543 . 1) (undo-tree-id544 . -1) 553 (#("Some(" 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-3-face))) . -535) (undo-tree-id545 . -4) (undo-tree-id546 . -5) 540 (528 . 531) (t 25335 44871 485341 259000)) nil (25335 45041 340715 24000) 0 nil])
([nil nil ((629 . 630) (627 . 629) (626 . 627)) nil (25335 45041 340709 133000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil rear-nonsticky nil 646 . 647) (nil fontified nil 630 . 647) (630 . 647) 629) nil (25335 45041 340708 451000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((669 . 680) (#("ins" 0 3 (fontified t ws-butler-chg chg)) . -669) (undo-tree-id529 . -3) 672 (669 . 672) (#("I" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -669) (undo-tree-id530 . -1) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -670) (undo-tree-id531 . -1) 671 (669 . 671) (666 . 669) (661 . 666) (648 . 661) (647 . 648) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -647) (undo-tree-id532 . -1) 648 (647 . 648)) nil (25335 45041 340707 530000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((690 . 691) (t 25335 44974 868789 537000)) nil (25335 45041 340704 324000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("if " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t)) . -528) (undo-tree-id528 . -3) 531 (t 25335 44977 156865 949000)) nil (25335 45041 340703 752000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((528 . 531) (t 25335 45006 809856 686000)) nil (25335 45041 340703 31000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(";" 0 1 (fontified t)) . 690)) nil (25335 45041 340702 570000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified nil ws-butler-chg chg)) . 647) (647 . 648) (#("," 0 1 (fontified nil)) . 647) (undo-tree-id526 . -1) (#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 648) (undo-tree-id527 . -8) (#("None " 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil)) . 661) (#("=> " 0 1 (fontified nil) 1 2 (fontified nil syntax-table (1)) 2 3 (fontified nil)) . 666) (#("In" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face) 1 2 (fontified nil ws-butler-chg chg face font-lock-type-face)) . 669) (669 . 671) (#("ins" 0 3 (fontified nil ws-butler-chg chg)) . 669) (669 . 672) (#("instruction" 0 11 (fontified t)) . 669)) nil (25335 45041 340702 29000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("(opcode, operand)" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 16 (fontified nil) 16 17 (rear-nonsticky nil fontified nil face (rainbow-delimiters-depth-4-face))) . 630) (undo-tree-id506 . -16) (undo-tree-id507 . -16) (undo-tree-id508 . -17) (undo-tree-id509 . 1) (undo-tree-id510 . -17) (undo-tree-id511 . 17) (undo-tree-id512 . -1) (undo-tree-id513 . -17) (undo-tree-id514 . -16) (undo-tree-id515 . -16) (undo-tree-id516 . -16) (undo-tree-id517 . -16) (undo-tree-id518 . -16) (undo-tree-id519 . -16) (undo-tree-id520 . -16) (undo-tree-id521 . -16) (undo-tree-id522 . -16) (undo-tree-id523 . -16) (undo-tree-id524 . -16) (undo-tree-id525 . -16) (nil rear-nonsticky t 646 . 647)) nil (25335 45041 340700 226000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified nil)) . 626) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (#("=>" 0 1 (fontified nil) 1 2 (fontified nil syntax-table (1))) . 627) (undo-tree-id459 . -2) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -2) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -2) (undo-tree-id473 . -2) (undo-tree-id474 . -2) (undo-tree-id475 . -2) (undo-tree-id476 . -2) (undo-tree-id477 . -2) (undo-tree-id478 . -2) (undo-tree-id479 . -2) (undo-tree-id480 . -2) (undo-tree-id481 . -2) (undo-tree-id482 . -2) (undo-tree-id483 . -2) (undo-tree-id484 . -2) (undo-tree-id485 . -2) (undo-tree-id486 . -2) (undo-tree-id487 . -2) (undo-tree-id488 . -2) (#(" " 0 1 (fontified t)) . 629) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1)) nil (25335 45041 340691 910000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("if " 0 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil)) . 528) (undo-tree-id1 . -3) (undo-tree-id2 . -3) (undo-tree-id3 . -3) (undo-tree-id4 . -3) (undo-tree-id5 . -3) (undo-tree-id6 . -3) (undo-tree-id7 . -3) (undo-tree-id8 . -3) (undo-tree-id9 . -3) (undo-tree-id10 . -3) (undo-tree-id11 . -3) (undo-tree-id12 . -3) (undo-tree-id13 . -3) (undo-tree-id14 . -3) (undo-tree-id15 . -3) (undo-tree-id16 . -3) (undo-tree-id17 . -3) (535 . 540) (552 . 553) (#("math " 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil ws-butler-chg chg) 4 5 (fontified nil ws-butler-chg chg)) . 555) (559 . 560) (#("c" 0 1 (fontified nil ws-butler-chg chg)) . 559) (558 . 560) (#("chj" 0 2 (fontified nil face font-lock-keyword-face) 2 3 (fontified nil ws-butler-chg chg)) . 558) (560 . 561) (#("j " 0 1 (fontified nil ws-butler-chg chg) 1 2 (fontified nil ws-butler-chg chg)) . 560) (560 . 562) (#(" " 0 1 (fontified nil)) . 560) (588 . 589) (#(" " 0 1 (fontified nil)) . 588) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . 589) (undo-tree-id96 . 1) (undo-tree-id97 . 1) (589 . 590) (#("{}" 0 1 (fontified nil face (rainbow-delimiters-depth-3-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-3-face))) . 589) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -2) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . 1) (undo-tree-id169 . -1) (undo-tree-id170 . 1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("
        
        " 0 1 (fontified t) 1 9 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face)) 9 10 (fontified nil) 10 18 (fontified t)) . 590) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -10) (undo-tree-id185 . -1) (undo-tree-id186 . -17) (undo-tree-id187 . -1) (undo-tree-id188 . -17) (undo-tree-id189 . -17) (undo-tree-id190 . -17) (undo-tree-id191 . -17) (undo-tree-id192 . -17) (undo-tree-id193 . -17) (undo-tree-id194 . -17) (undo-tree-id195 . -17) (undo-tree-id196 . -17) (undo-tree-id197 . -17) (undo-tree-id198 . -17) (undo-tree-id199 . -10) (undo-tree-id200 . -18) (undo-tree-id201 . -18) (undo-tree-id202 . -18) (undo-tree-id203 . -18) (undo-tree-id204 . -18) (undo-tree-id205 . -18) (undo-tree-id206 . -18) (undo-tree-id207 . -18) (undo-tree-id208 . -18) (undo-tree-id209 . -18) (undo-tree-id210 . -18) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -18) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . 17) (undo-tree-id248 . -1) (undo-tree-id249 . 17) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (591 . 599) (#("            " 0 12 (fontified nil)) . 591) (undo-tree-id257 . -12) (undo-tree-id258 . -12) (undo-tree-id259 . -12) (undo-tree-id260 . -12) (undo-tree-id261 . -12) (undo-tree-id262 . -12) (undo-tree-id263 . -12) (undo-tree-id264 . -12) (undo-tree-id265 . -12) (undo-tree-id266 . -12) (undo-tree-id267 . -12) (undo-tree-id268 . -12) (undo-tree-id269 . -12) (undo-tree-id270 . -12) (undo-tree-id271 . -12) (undo-tree-id272 . -12) (undo-tree-id273 . -12) (undo-tree-id274 . -12) (undo-tree-id275 . -12) (undo-tree-id276 . -12) (undo-tree-id277 . -12) (undo-tree-id278 . -12) (undo-tree-id279 . -12) (undo-tree-id280 . -12) (undo-tree-id281 . -12) (undo-tree-id282 . -12) (undo-tree-id283 . -12) (undo-tree-id284 . -12) (undo-tree-id285 . -12) (undo-tree-id286 . -12) (undo-tree-id287 . -12) (undo-tree-id288 . -12) (undo-tree-id289 . -12) (undo-tree-id290 . -12) (undo-tree-id291 . -12) (undo-tree-id292 . -12) (undo-tree-id293 . -12) (undo-tree-id294 . -12) (undo-tree-id295 . -12) (undo-tree-id296 . -12) (undo-tree-id297 . -12) (undo-tree-id298 . -12) (undo-tree-id299 . -12) (undo-tree-id300 . -12) (undo-tree-id301 . -12) (undo-tree-id302 . -12) (undo-tree-id303 . -12) (#("Some(" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil ws-butler-chg chg face font-lock-type-face)) . 603) (undo-tree-id304 . -4) (undo-tree-id305 . -4) (undo-tree-id306 . -4) (undo-tree-id307 . -4) (undo-tree-id308 . -4) (undo-tree-id309 . -4) (undo-tree-id310 . -4) (undo-tree-id311 . -4) (undo-tree-id312 . -4) (undo-tree-id313 . -4) (undo-tree-id314 . -4) (undo-tree-id315 . -4) (undo-tree-id316 . -4) (undo-tree-id317 . -4) (undo-tree-id318 . -4) (undo-tree-id319 . -4) (undo-tree-id320 . -4) (undo-tree-id321 . -4) (undo-tree-id322 . -4) (undo-tree-id323 . -4) (undo-tree-id324 . -4) (undo-tree-id325 . -4) (undo-tree-id326 . -4) (undo-tree-id327 . -4) (undo-tree-id328 . -4) (undo-tree-id329 . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) (undo-tree-id332 . -4) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (undo-tree-id335 . -4) (undo-tree-id336 . -4) (undo-tree-id337 . -4) (undo-tree-id338 . -4) (undo-tree-id339 . -4) (undo-tree-id340 . -4) (undo-tree-id341 . -4) (undo-tree-id342 . -4) (undo-tree-id343 . 1) (undo-tree-id344 . -4) (undo-tree-id345 . 1) (undo-tree-id346 . -4) (undo-tree-id347 . -4) (undo-tree-id348 . -4) (undo-tree-id349 . -4) (undo-tree-id350 . -4) (undo-tree-id351 . -4) (undo-tree-id352 . -4) (607 . 608) (#("()" 0 1 (fontified nil face (rainbow-delimiters-depth-4-face)) 1 2 (fontified nil face (rainbow-delimiters-depth-4-face))) . 607) (undo-tree-id353 . -2) (undo-tree-id354 . -2) (undo-tree-id355 . -2) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -2) (undo-tree-id360 . -2) (undo-tree-id361 . -2) (undo-tree-id362 . -2) (undo-tree-id363 . -2) (undo-tree-id364 . -2) (undo-tree-id365 . -2) (undo-tree-id366 . -2) (undo-tree-id367 . -2) (undo-tree-id368 . -2) (undo-tree-id369 . -2) (undo-tree-id370 . -2) (undo-tree-id371 . -2) (undo-tree-id372 . -2) (undo-tree-id373 . -2) (undo-tree-id374 . -2) (undo-tree-id375 . -2) (undo-tree-id376 . -2) (undo-tree-id377 . -2) (undo-tree-id378 . -2) (undo-tree-id379 . -2) (undo-tree-id380 . -2) (undo-tree-id381 . -2) (undo-tree-id382 . -2) (undo-tree-id383 . -2) (undo-tree-id384 . -2) (undo-tree-id385 . -1) (undo-tree-id386 . -2) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . 1) (undo-tree-id393 . -2) (undo-tree-id394 . 2) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (#("opcode" 0 1 (fontified nil) 1 6 (fontified nil)) . 608) (undo-tree-id402 . -6) (undo-tree-id403 . -6) (undo-tree-id404 . -6) (undo-tree-id405 . -6) (undo-tree-id406 . -6) (undo-tree-id407 . -6) (undo-tree-id408 . -6) (undo-tree-id409 . -6) (undo-tree-id410 . -6) (undo-tree-id411 . -6) (undo-tree-id412 . -6) (undo-tree-id413 . -6) (undo-tree-id414 . -6) (undo-tree-id415 . -6) (#("(" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 608) (#("(" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 608) (609 . 610) (#(")" 0 1 (fontified nil face (rainbow-delimiters-depth-1-face))) . 615) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (#(", " 0 2 (fontified nil)) . 615) (#("oep" 0 1 (fontified nil) 1 2 (fontified nil ws-butler-chg chg) 2 3 (fontified nil ws-butler-chg chg)) . 617) (618 . 620) (#("perand" 0 6 (fontified t)) . 618)) nil (25335 45068 19530 306000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((572 . 573) (#("l" 0 1 (fontified t)) . 572) (undo-tree-id937 . 1)) ((572 . 573) (#("k" 0 1 (fontified t)) . 572)) (25335 45068 593537 742000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(")" 0 1 (fontified t face (rainbow-delimiters-mismatched-face))) . -549) (undo-tree-id982 . -1) (undo-tree-id983 . 1) (undo-tree-id984 . -1) 550 (#("Some(" 0 4 (fontified t face font-lock-type-face) 4 5 (fontified t face (rainbow-delimiters-depth-3-face))) . -532) (undo-tree-id985 . -4) (undo-tree-id986 . -5) 537) nil (25335 45111 491555 85000) 0 nil])
([nil nil ((598 . 600) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -598) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (594 . 599) (#("m" 0 1 (fontified t ws-butler-chg chg)) . -594) (undo-tree-id977 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -595) (undo-tree-id978 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -596) (undo-tree-id979 . -1) 597 (594 . 597) (582 . 594) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 582) (581 . 599) (580 . 582) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -580) (580 . 581) (579 . 580) (#(";" 0 1 (fontified t)) . -579) (undo-tree-id980 . -1) (#("S" 0 1 (fontified t ws-butler-chg chg face font-lock-type-face)) . -580) (undo-tree-id981 . -1) 581 (580 . 581)) nil (25335 45111 491551 629000) 0 nil])
([nil nil ((nil rear-nonsticky nil 616 . 617) (nil fontified nil 599 . 617) (599 . 617) 598) nil (25335 45111 491548 102000) 0 nil])
([nil nil ((619 . 622) (618 . 619)) nil (25335 45111 491547 751000) 0 nil])
([nil nil ((nil rear-nonsticky nil 639 . 640) (nil fontified nil 622 . 640) (622 . 640) 621) nil (25335 45111 491547 451000) 0 nil])
([nil nil ((659 . 662) (654 . 659) (641 . 654) (640 . 641) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -640) (undo-tree-id974 . -1) 641 (640 . 641)) nil (25335 45111 491546 830000) 0 nil])
([nil nil ((nil rear-nonsticky nil 679 . 680) (nil fontified nil 662 . 680) (662 . 680) 661) nil (25335 45111 491545 347000) 0 nil])
([nil nil ((682 . 683) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -599) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) 600 (662 . 673) (#("instr" 0 5 (fontified t ws-butler-chg chg)) . -662) (undo-tree-id961 . -5) 667 (662 . 667) (#(" " 0 1 (ws-butler-chg chg fontified t)) . -662) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#("(" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-4-face))) . -663) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . 1) (undo-tree-id967 . -1) 664 (#("opcode, " 0 8 (ws-butler-chg chg fontified t)) . -664) (undo-tree-id968 . -8) (undo-tree-id969 . -8) 672 (#("operand)" 0 7 (ws-butler-chg chg fontified t) 7 8 (ws-butler-chg chg fontified t rear-nonsticky t face (rainbow-delimiters-depth-4-face))) . -672) (undo-tree-id970 . -7) (undo-tree-id971 . -8) (undo-tree-id972 . 1) (undo-tree-id973 . -8) 680) nil (25335 45111 491541 369000) 0 nil])
([nil nil ((552 . 558) (566 . 567) (#("k" 0 1 (fontified t)) . -566) (undo-tree-id987 . -1) 567 (t 25335 45111 513359 997000)) nil (25335 45121 302008 29000) 0 nil])
([nil nil ((681 . 683) (#("\"" 0 1 (fontified nil ws-butler-chg chg)) . -681) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (681 . 682) (679 . 681) (679 . 680) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . 668) (667 . 668) (667 . 668) (t 25335 45121 321688 537000)) nil (25335 45135 25886 802000) 0 nil])
([nil nil ((747 . 748) (#("4" 0 1 (fontified t face rust-string-interpolation)) . -747) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) 748 (t 25335 45135 290156 529000)) nil (25335 45151 43073 530000) 0 nil])
([nil nil ((798 . 802) (797 . 799) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -797) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (797 . 798) (796 . 798) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -796) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (796 . 797) (791 . 796) (#("inst" 0 4 (fontified t ws-butler-chg chg)) . -791) (undo-tree-id1021 . -4) 795 (791 . 795) (778 . 782) (#(" " 0 1 (fontified nil)) . 778) (777 . 778) (785 . 787) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 761) (760 . 761) (759 . 761) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -759) (759 . 760) (#("P" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -759) (undo-tree-id1022 . -1) (#("{" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . -760) (undo-tree-id1023 . -1) (undo-tree-id1024 . 1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (#("}" 0 1 (fontified t ws-butler-chg chg face rust-string-interpolation)) . 761) (undo-tree-id1027 . 1) (undo-tree-id1028 . -1) (760 . 762) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -760) (759 . 761) (758 . 759) (752 . 757) (t 25335 45151 562701 850000)) nil (25335 45271 455311 534000) 0 nil])
([nil nil ((777 . 778) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil ws-butler-chg chg)) . 777) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -777) (undo-tree-id1016 . -1) 801) nil (25335 45271 455304 10000) 0 nil])
([nil nil ((765 . 795) (#(" " 0 1 (fontified t)) . 765) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) 766) nil (25335 45271 455300 373000) 0 nil])
([nil nil ((1012 . 1014) (t 25335 45271 490725 105000)) nil (25335 45403 969205 413000) 0 nil])
([nil nil ((1336 . 1338) (1350 . 1351) (#("]" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 1349) (undo-tree-id1094 . 1) (undo-tree-id1095 . -1) (1347 . 1349) (1346 . 1348) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -1346) (1346 . 1347) (1336 . 1346) (1333 . 1335) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 1333) (1332 . 1333) (1331 . 1333) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -1331) (1331 . 1332) (1325 . 1331) (1323 . 1325) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1323) (undo-tree-id1096 . -1) 1324 (1322 . 1324) (1314 . 1322) (1313 . 1315) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -1313) (1313 . 1314) (1311 . 1312) (#("!" 0 1 (fontified t ws-butler-chg chg)) . -1312) (undo-tree-id1097 . -1) 1313 (1312 . 1313) (1311 . 1313) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1311) (1305 . 1312) (1304 . 1305) (1301 . 1304) (1297 . 1301) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -1297) (undo-tree-id1098 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1298) (undo-tree-id1099 . -1) 1299 (1292 . 1299) (1280 . 1292) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1280) (1279 . 1297) (1278 . 1280) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -1278) (1278 . 1279) (1277 . 1278) (1276 . 1277) (1273 . 1276) (1272 . 1273) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1272) (1271 . 1272) (1270 . 1272) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1270) (1267 . 1271) (1266 . 1267) (1256 . 1266) (#("successor" 0 9 (fontified t ws-butler-chg chg)) . -1256) (undo-tree-id1100 . -9) 1265 (1256 . 1265) (1253 . 1256) (1244 . 1253) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 1244) (undo-tree-id1101 . -8) 1252 (1243 . 1252) (1242 . 1243) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 1242) (1241 . 1242) (1240 . 1242) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1240) (1239 . 1241) (1233 . 1239) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1233) (1232 . 1233) (1231 . 1233) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1231) (1222 . 1232) (#("." 0 1 (fontified t ws-butler-chg chg)) . -1222) (undo-tree-id1102 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -1223) (undo-tree-id1103 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1224) (undo-tree-id1104 . -1) 1225 (1222 . 1225) (1219 . 1220) (1218 . 1219) (#("\\" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1218) (undo-tree-id1105 . -1) 1219 (1210 . 1219) (1209 . 1211) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -1209) (1209 . 1210) (1208 . 1210) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -1208) (1203 . 1209) (1201 . 1203) (1200 . 1201) (1195 . 1200) (1190 . 1195) (1186 . 1190) (1177 . 1186) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 1177) (undo-tree-id1106 . -8) (undo-tree-id1107 . -8) 1185 (1176 . 1185) (t 25335 45404 899208 38000) 1122) nil (25335 46268 348523 386000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -1362) (undo-tree-id1093 . -4) 1366 (1353 . 1366) 1337) nil (25335 46268 348509 159000) 0 nil])
([nil nil ((#("        
" 0 8 (fontified t ws-butler-chg chg) 8 9 (fontified t ws-butler-chg delete)) . 1354) (undo-tree-id1090 . 1) (undo-tree-id1091 . -9) (undo-tree-id1092 . -7) 1361) nil (25335 46268 348508 67000) 0 nil])
([nil nil ((1396 . 1408) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1396) (1395 . 1413) (1394 . 1396) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -1394) (1394 . 1395) (1392 . 1394) (1389 . 1392) (1387 . 1389) (#("*" 0 1 (fontified t ws-butler-chg chg)) . -1387) (undo-tree-id1085 . -1) (#(")" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . -1388) (undo-tree-id1086 . -1) (undo-tree-id1087 . 1) (undo-tree-id1088 . -1) 1389 (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 1389) (1387 . 1389) (1386 . 1388) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1386) (1386 . 1387) (1382 . 1386) (1372 . 1382) (#("succ" 0 4 (ws-butler-chg chg fontified t)) . -1372) (undo-tree-id1089 . -4) 1376 (1372 . 1376) (1369 . 1372) (1364 . 1369) (1363 . 1364)) nil (25335 46268 348505 502000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1420 . 1421) (#("
" 0 1 (ws-butler-chg chg fontified nil)) . -1482) (1408 . 1483) 1407) nil (25335 46268 348501 474000) 0 nil])
([nil nil ((#("            
" 0 12 (fontified t ws-butler-chg chg) 12 13 (fontified t ws-butler-chg chg)) . 1396) (undo-tree-id1038 . -13) (undo-tree-id1039 . -13) (undo-tree-id1040 . -11) (undo-tree-id1041 . -11) (undo-tree-id1042 . -11) (undo-tree-id1043 . -11) (undo-tree-id1044 . -11) (undo-tree-id1045 . -11) (undo-tree-id1046 . -11) (undo-tree-id1047 . -11) (undo-tree-id1048 . -11) (undo-tree-id1049 . -11) (undo-tree-id1050 . -11) (undo-tree-id1051 . -11) (undo-tree-id1052 . -11) (undo-tree-id1053 . -11) (undo-tree-id1054 . -11) (undo-tree-id1055 . -11) (undo-tree-id1056 . -11) (undo-tree-id1057 . -11) (undo-tree-id1058 . -11) (undo-tree-id1059 . -11) (undo-tree-id1060 . -11) (undo-tree-id1061 . -11) (undo-tree-id1062 . -11) (undo-tree-id1063 . -11) (undo-tree-id1064 . -11) (undo-tree-id1065 . -11) (undo-tree-id1066 . -11) (undo-tree-id1067 . -11) (undo-tree-id1068 . -11) (undo-tree-id1069 . -11) (undo-tree-id1070 . -11) (undo-tree-id1071 . -11) (undo-tree-id1072 . -11) (undo-tree-id1073 . -11) (undo-tree-id1074 . -11) (undo-tree-id1075 . -11) (undo-tree-id1076 . -11) (undo-tree-id1077 . -11) (undo-tree-id1078 . -11) (undo-tree-id1079 . -11) (undo-tree-id1080 . -11) (undo-tree-id1081 . -11) (undo-tree-id1082 . -11) (undo-tree-id1083 . -11) (undo-tree-id1084 . -11) 1407) nil (25335 46268 348499 610000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 1527) (undo-tree-id1029 . 1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (1525 . 1527) (1524 . 1526) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -1524) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (1524 . 1525) (1514 . 1524) (#("succ" 0 4 (ws-butler-chg chg fontified t)) . -1514) (undo-tree-id1034 . -4) 1518 (1514 . 1518) (1512 . 1514) (1465 . 1499) (#(" " 0 1 (ws-butler-chg chg fontified t)) . 1465) (undo-tree-id1035 . -1) 1466 (1459 . 1461) (#("k" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1459) (undo-tree-id1036 . -1) (#("s" 0 1 (ws-butler-chg chg fontified t face font-lock-string-face)) . -1460) (undo-tree-id1037 . -1) 1461 (1453 . 1461) (1452 . 1453) (1442 . 1444) (1439 . 1440)) nil (25335 46268 348457 600000) 0 nil])
([nil nil ((1583 . 1585) (1571 . 1583) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1571) (undo-tree-id1130 . -8) (1570 . 1588) (1569 . 1571) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -1569) (1569 . 1570) (1567 . 1569) (1565 . 1567) (1564 . 1565) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1564) (undo-tree-id1131 . 1) (undo-tree-id1132 . -1) (1563 . 1564) (1562 . 1564) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1562) (1558 . 1563) (1548 . 1558) (#("succ" 0 4 (fontified t ws-butler-chg chg)) . -1548) (undo-tree-id1133 . -4) 1552 (1548 . 1552) (1545 . 1548) (1540 . 1545) (1539 . 1540) (t 25335 46268 376683 703000)) nil (25335 46323 598430 639000) 0 nil])
([nil nil ((1643 . 1644) (1642 . 1644) (#("\"" 0 1 (fontified nil ws-butler-chg chg)) . -1642) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (1642 . 1643) (1641 . 1643) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1641) (undo-tree-id1110 . -1) (undo-tree-id1111 . -1) (1637 . 1642) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -1637) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (1628 . 1638) (1626 . 1628) (#("}" 0 1 (fontified nil ws-butler-chg chg face rust-string-interpolation)) . 1625) (1624 . 1625) (1623 . 1625) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -1623) (1623 . 1624) (1616 . 1623) (#("L" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1616) (undo-tree-id1118 . -1) 1617 (1615 . 1617) (1614 . 1615) (1605 . 1606) (#("A" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1605) (undo-tree-id1119 . -1) (#("S" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1606) (undo-tree-id1120 . -1) 1607 (1605 . 1607) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1605) (undo-tree-id1121 . -1) 1606 (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1614) (undo-tree-id1122 . -1) 1615 (#(":" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1615) (undo-tree-id1123 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1616) (undo-tree-id1124 . -1) 1617 (1615 . 1617) (1605 . 1615) (#("success" 0 7 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1605) (undo-tree-id1125 . -7) 1612 (1605 . 1612) (1604 . 1606) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -1604) (1604 . 1605) (1603 . 1605) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1603) (1603 . 1604) (1596 . 1603) (#("form" 0 4 (fontified t ws-butler-chg chg)) . -1596) (undo-tree-id1126 . -4) 1600 (1595 . 1600) (#("f" 0 1 (fontified t ws-butler-chg chg)) . -1595) (undo-tree-id1127 . -1) 1596 (1595 . 1596) (#("successors" 0 10 (fontified t ws-butler-chg chg)) . -1595) (undo-tree-id1128 . -10) 1605 (1595 . 1605) (#("successor" 0 9 (fontified t ws-butler-chg chg)) . -1595) (undo-tree-id1129 . -9) 1604 (1595 . 1604) (1592 . 1595) (1591 . 1592) (1585 . 1591)) nil (25335 46323 598421 461000) 0 nil])
([nil nil ((1647 . 1648) (t 25335 46323 626725 630000)) nil (25335 46325 635503 381000) 0 nil])
([nil nil ((1625 . 1627) (t 25335 46325 658800 426000)) nil (25335 46334 770955 151000) 0 nil])
([nil nil ((1639 . 1650) (t 25335 46334 971142 942000)) nil (25335 46432 191232 878000) 0 nil])
([nil nil ((1629 . 1663) (#(" " 0 1 (fontified t)) . 1629) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) 1630 (t 25335 46432 242696 448000)) nil (25335 46435 288234 457000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil ws-butler-chg chg)) . 1463) (undo-tree-id1154 . -1) (1462 . 1463) (1461 . 1463) (#("{" 0 1 (fontified nil face font-lock-string-face ws-butler-chg chg)) . -1461) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (1461 . 1462) (t 25335 46435 310807 861000)) nil (25335 46447 48471 147000) 0 nil])
([nil nil ((1665 . 1675) (#("debugout" 0 1 (fontified t) 1 8 (fontified t)) . -1665) (undo-tree-id1157 . -8) (undo-tree-id1158 . -8) (undo-tree-id1159 . -8) 1673 (#("." 0 1 (fontified t)) . -1673) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) 1674 (#("as_" 0 3 (fontified t)) . -1674) (undo-tree-id1163 . -3) (undo-tree-id1164 . -3) (undo-tree-id1165 . -3) 1677 (#("slice()" 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 7 (fontified t face (rainbow-delimiters-depth-1-face))) . -1677) (undo-tree-id1166 . -7) (undo-tree-id1167 . 1) (undo-tree-id1168 . -7) (undo-tree-id1169 . 2) (undo-tree-id1170 . -6) 1684 (t 25335 46447 411246 912000)) nil (25335 46479 140052 47000) 0 nil])
([nil nil ((1676 . 1687) (t 25335 46479 164396 315000)) nil (25335 46489 282759 604000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . 1640) (1639 . 1640) (1638 . 1640) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1638) (1631 . 1639) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 1631) (1630 . 1631) (1629 . 1631) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1629) (1626 . 1630) (1623 . 1626) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -1623) (undo-tree-id1171 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg)) . -1624) (undo-tree-id1172 . -1) (#("s" 0 1 (fontified t ws-butler-chg chg)) . -1625) (undo-tree-id1173 . -1) 1626 (1624 . 1626) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1624) (undo-tree-id1174 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg)) . -1625) (undo-tree-id1175 . -1) 1626 (1621 . 1626) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -1621) (undo-tree-id1176 . -1) (#("." 0 1 (fontified t ws-butler-chg chg)) . -1622) (undo-tree-id1177 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -1623) (undo-tree-id1178 . -1) 1624 (1621 . 1624) (1622 . 1623) (1620 . 1621) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -1619) (undo-tree-id1179 . -1) 1620 (1618 . 1620) (1617 . 1619) (1616 . 1618) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1616) (1612 . 1617) (#("[" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -1612) (undo-tree-id1180 . -1) (undo-tree-id1181 . 1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (#("]" 0 1 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 1613) (undo-tree-id1184 . 1) (undo-tree-id1185 . -1) (1612 . 1614) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -1612) (1612 . 1613) (1602 . 1612) (#("success" 0 7 (fontified t ws-butler-chg chg)) . -1602) (undo-tree-id1186 . -7) 1609 (1602 . 1609) (1600 . 1602) (1589 . 1600) (1585 . 1589) (1572 . 1585) (t 25335 46489 308762 729000) 1571) nil (25335 46675 465838 696000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -1746) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (#("s" 0 1 (fontified t)) . -1747) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("_" 0 1 (fontified t)) . -1748) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) 1749 (#("slice()." 0 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-1-face)) 6 7 (fontified t face (rainbow-delimiters-depth-1-face)) 7 8 (fontified t)) . -1749) (undo-tree-id1523 . -8) (undo-tree-id1524 . -8) (undo-tree-id1525 . -8) (undo-tree-id1526 . -8) (undo-tree-id1527 . -8) (undo-tree-id1528 . -8) (undo-tree-id1529 . -8) (undo-tree-id1530 . -8) (undo-tree-id1531 . -8) (undo-tree-id1532 . -8) (undo-tree-id1533 . -8) (undo-tree-id1534 . -8) (undo-tree-id1535 . -8) (undo-tree-id1536 . -5) (undo-tree-id1537 . -5) (undo-tree-id1538 . -5) (undo-tree-id1539 . -5) (undo-tree-id1540 . -5) (undo-tree-id1541 . -5) (undo-tree-id1542 . -5) (undo-tree-id1543 . -5) (undo-tree-id1544 . -5) (undo-tree-id1545 . -5) (undo-tree-id1546 . -5) (undo-tree-id1547 . -5) (undo-tree-id1548 . -5) (undo-tree-id1549 . -5) (undo-tree-id1550 . -5) (undo-tree-id1551 . -5) (undo-tree-id1552 . -6) (undo-tree-id1553 . -5) (undo-tree-id1554 . -6) (undo-tree-id1555 . -6) (undo-tree-id1556 . -6) (undo-tree-id1557 . -6) (undo-tree-id1558 . -6) (undo-tree-id1559 . -6) (undo-tree-id1560 . -6) (undo-tree-id1561 . -6) (undo-tree-id1562 . -6) (undo-tree-id1563 . -6) (undo-tree-id1564 . -7) (undo-tree-id1565 . -6) (undo-tree-id1566 . -7) (undo-tree-id1567 . -7) (undo-tree-id1568 . -7) (undo-tree-id1569 . -7) (undo-tree-id1570 . -7) (undo-tree-id1571 . -7) (undo-tree-id1572 . -7) (undo-tree-id1573 . -7) (undo-tree-id1574 . -7) (undo-tree-id1575 . -7) (undo-tree-id1576 . -8) (undo-tree-id1577 . -7) (undo-tree-id1578 . -8) (undo-tree-id1579 . -8) (undo-tree-id1580 . -8) (undo-tree-id1581 . -8) (undo-tree-id1582 . -8) (undo-tree-id1583 . -8) (undo-tree-id1584 . -8) (undo-tree-id1585 . -8) (undo-tree-id1586 . -8) (undo-tree-id1587 . -8) (undo-tree-id1588 . -8) 1757 (t 25335 46675 559430 228000)) nil (25335 46680 349826 632000) 0 nil])
([nil nil ((1613 . 1625) (t 25335 46680 563608 4000)) nil (25335 46693 909849 305000) 0 nil])
([nil nil ((1689 . 1690) (1677 . 1687) (1676 . 1678) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . -1676) (undo-tree-id1589 . -1) (undo-tree-id1590 . -1) (1676 . 1677) (1675 . 1677) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1675) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (1667 . 1676) (1654 . 1667) (t 25335 46694 688109 445000) 1596) nil (25335 46722 256063 541000) 0 nil])
([nil nil ((apply -6 1691 1812 undo--wrap-and-run-primitive-undo 1691 1812 ((1765 . 1768) (1703 . 1706) 1806)) (t 25335 46722 877108 755000)) nil (25335 46733 186369 882000) 0 nil])
([nil nil ((1438 . 1442) (1436 . 1438) (1316 . 1320) (1314 . 1316) (t 25335 46733 205474 449000)) nil (25335 46768 393845 12000) 0 nil])
([nil nil ((1320 . 1324) (1442 . 1446) (t 25335 46768 634727 68000)) nil (25335 46783 949623 650000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t ws-butler-chg chg)) . -1552) (undo-tree-id1594 . -12) (undo-tree-id1595 . -12) 1564 (1551 . 1564) (t 25335 46783 975268 600000) 1531) nil (25335 46946 853895 661000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1564 . 1565) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -1670) (1552 . 1671)) nil (25335 46946 853893 387000) 0 nil])
([nil nil ((1668 . 1669) (#("{" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . 1658) (undo-tree-id1593 . -1) (1657 . 1658) (1657 . 1658)) nil (25335 46946 853890 201000) 0 nil])
([nil nil ((1658 . 1660) (t 25335 46947 117000 316000)) nil (25335 46955 578476 995000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face rust-string-interpolation)) . -1658) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) 1659 (t 25335 46955 601297 187000)) nil (25335 46964 193122 953000) 0 nil])
([nil nil ((1668 . 1670) (#("?" 0 1 (fontified t face rust-string-interpolation)) . -1658) (undo-tree-id1612 . 1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) 1659 (t 25335 46964 537609 784000)) nil (25335 46968 626214 346000) 0 nil])
([nil nil ((1811 . 1812) (1810 . 1812) (#("<" 0 1 (fontified nil ws-butler-chg chg face font-lock-type-face)) . -1810) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (1807 . 1811) (1806 . 1808) (#("<" 0 1 (fontified nil ws-butler-chg chg)) . -1806) (1806 . 1807) (1804 . 1806) (1806 . 1807) (1804 . 1806) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1804) (1797 . 1805) (#("v" 0 1 (fontified t ws-butler-chg chg)) . -1797) (undo-tree-id1645 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1798) (undo-tree-id1646 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -1799) (undo-tree-id1647 . -1) 1800 (#(";" 0 1 (fontified nil ws-butler-chg delete)) . 1800) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -1800) (undo-tree-id1648 . -1) 1801 (1796 . 1801) (t 25335 46968 865761 151000)) nil (25335 48188 360949 769000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1646 . 1647) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -1736) (1634 . 1737) 1593 (t 25335 48188 455854 557000)) nil (25335 48200 660924 139000) 0 nil])
([nil nil ((#("            let successors = successors.into_iter().map(|v| v.as_u64().unwrap());
" 0 11 (fontified t) 11 12 (fontified t rear-nonsticky t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t) 29 40 (fontified t) 40 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 51 (fontified t face (rainbow-delimiters-depth-4-face)) 51 52 (fontified t) 52 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-4-face)) 56 58 (fontified t) 58 59 (fontified t) 59 62 (fontified t) 62 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-1-face)) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 77 (fontified t) 77 78 (fontified t face (rainbow-delimiters-depth-1-face)) 78 79 (fontified t face (rainbow-delimiters-depth-1-face)) 79 80 (fontified t face (rainbow-delimiters-depth-4-face)) 80 81 (fontified t) 81 82 (fontified t ws-butler-chg chg)) . 1553) (undo-tree-id1649 . -82) (undo-tree-id1650 . -12) (undo-tree-id1651 . -82) (undo-tree-id1652 . -40) (undo-tree-id1653 . -12) (undo-tree-id1654 . -12) (undo-tree-id1655 . -12) (undo-tree-id1656 . -12) (undo-tree-id1657 . -12) (undo-tree-id1658 . -12) (undo-tree-id1659 . -12) (undo-tree-id1660 . -12) (undo-tree-id1661 . -12) (undo-tree-id1662 . -12) (undo-tree-id1663 . -12) (undo-tree-id1664 . -12) (undo-tree-id1665 . -12) (undo-tree-id1666 . -12) (undo-tree-id1667 . -12) (undo-tree-id1668 . -12) (undo-tree-id1669 . -12) 1565) nil (25335 48200 660920 131000) 0 nil])
([nil nil ((1699 . 1700) (1698 . 1700) (#("\"" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-1-face))) . -1698) (1698 . 1699) (1697 . 1699) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1697) (1693 . 1698) (#("j" 0 1 (fontified nil ws-butler-chg chg)) . -1693) (undo-tree-id1670 . -1) (1692 . 1694) (1682 . 1692) (#("su" 0 2 (fontified t ws-butler-chg chg)) . -1682) (undo-tree-id1671 . -2) 1684 (1682 . 1684) (1680 . 1682) (#("successors:?" 0 1 (fontified t face rust-string-interpolation) 1 10 (fontified t face rust-string-interpolation) 10 12 (fontified t face rust-string-interpolation)) . -1678) (undo-tree-id1672 . -12) (undo-tree-id1673 . -10) 1690 (t 25335 48200 684274 36000)) nil (25335 48215 515140 802000) 0 nil])
([nil nil ((1633 . 1634) (#("a" 0 1 (fontified t ws-butler-chg delete)) . -1633) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (#("s" 0 1 (fontified t face font-lock-keyword-face)) . -1634) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (#("_" 0 1 (fontified t)) . -1635) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) 1636 (#("u64()" 0 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-2-face)) 4 5 (fontified t face (rainbow-delimiters-depth-2-face))) . -1636) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . 1) (undo-tree-id1691 . -5) (undo-tree-id1692 . 2) (undo-tree-id1693 . -4) 1641 (1631 . 1633) (1628 . 1631) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -1628) (undo-tree-id1694 . -1) 1629 (1621 . 1629) (1613 . 1620) (#(")" 0 1 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face))) . -1622) (undo-tree-id1695 . -1) (undo-tree-id1696 . 1) (undo-tree-id1697 . -1) 1623 (#("." 0 1 (fontified t)) . -1622) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) 1623 (#("unwrap()" 0 6 (fontified t) 6 7 (fontified t face (rainbow-delimiters-depth-2-face)) 7 8 (fontified t face (rainbow-delimiters-depth-2-face))) . -1623) (undo-tree-id1702 . -8) (undo-tree-id1703 . -8) (undo-tree-id1704 . -8) (undo-tree-id1705 . -8) (undo-tree-id1706 . 1) (undo-tree-id1707 . -8) (undo-tree-id1708 . 2) (undo-tree-id1709 . -7) 1631 (#("v" 0 1 (fontified t ws-butler-chg delete)) . -1614) (undo-tree-id1710 . -1) (#("." 0 1 (fontified t)) . -1615) (undo-tree-id1711 . -1) 1616 (1633 . 1634) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . 1614) (1613 . 1614) (1613 . 1614) (#("." 0 1 (fontified t ws-butler-chg chg)) . -1632) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg)) . -1633) (undo-tree-id1714 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -1634) (undo-tree-id1715 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg)) . -1635) (undo-tree-id1716 . -1) 1636 (#("string" 0 6 (fontified t ws-butler-chg chg)) . -1636) (undo-tree-id1717 . -6) 1642 (1632 . 1642) (t 25335 48215 536783 485000)) nil (25335 48299 513599 912000) 0 nil])
([nil nil ((1635 . 1636) (t 25335 48299 855941 657000)) nil (25335 48304 932825 803000) 0 nil])
([nil nil ((#("            let successors = successors.into_iter().map(|v| format!(\"Block#{}\", v)).collect::<Vec<_>>();
" 0 1 (fontified t) 1 11 (fontified t) 11 12 (fontified t rear-nonsticky t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t) 29 40 (fontified t) 40 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 51 (fontified t face (rainbow-delimiters-depth-4-face)) 51 52 (fontified t) 52 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-4-face)) 56 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 67 (fontified t face rust-builtin-formatting-macro) 67 68 (fontified t face (rainbow-delimiters-depth-1-face)) 68 75 (fontified t face font-lock-string-face) 75 77 (fontified t face rust-string-interpolation) 77 78 (fontified t face font-lock-string-face) 78 81 (fontified t) 81 82 (fontified t face (rainbow-delimiters-depth-1-face)) 82 83 (fontified t face (rainbow-delimiters-depth-4-face)) 83 84 (fontified t) 84 91 (fontified t) 91 93 (fontified t) 93 94 (fontified t face (rainbow-delimiters-depth-4-face)) 94 97 (fontified t face font-lock-type-face) 97 98 (fontified t face (rainbow-delimiters-depth-1-face)) 98 99 (fontified t) 99 100 (fontified t face (rainbow-delimiters-depth-1-face)) 100 101 (fontified t face (rainbow-delimiters-depth-4-face)) 101 102 (fontified t face (rainbow-delimiters-depth-4-face)) 102 103 (fontified t face (rainbow-delimiters-depth-4-face)) 103 104 (fontified t) 104 105 (fontified t)) . 1553) (undo-tree-id1730 . -80) (undo-tree-id1731 . 22) (undo-tree-id1732 . -104) (undo-tree-id1733 . -82) (undo-tree-id1734 . -104) (undo-tree-id1735 . 23) (undo-tree-id1736 . -83) (undo-tree-id1737 . 50) (undo-tree-id1738 . -56) 1635 (t 25335 48305 172140 54000)) nil (25335 48323 669100 955000) 0 nil])
([nil nil ((#("            " 0 12 (fontified t ws-butler-chg chg)) . -1644) (undo-tree-id1729 . -12) 1656 (1643 . 1656) 1642) nil (25335 48323 669096 326000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil ws-butler-chg chg)) . -1749) (1644 . 1750)) nil (25335 48323 669095 334000) 0 nil])
([nil nil ((#("            let successors = successors.into_iter().map(|v| v.as_u64().unwrap()).collect::<Vec<_>>();
" 0 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 26 (fontified t face font-lock-variable-name-face) 26 29 (fontified t) 29 40 (fontified t) 40 49 (fontified t) 49 50 (fontified t face (rainbow-delimiters-depth-4-face)) 50 51 (fontified t face (rainbow-delimiters-depth-4-face)) 51 52 (fontified t) 52 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-4-face)) 56 58 (fontified t) 58 59 (fontified t) 59 62 (fontified t) 62 68 (fontified t) 68 69 (fontified t face (rainbow-delimiters-depth-1-face)) 69 70 (fontified t face (rainbow-delimiters-depth-1-face)) 70 77 (fontified t) 77 78 (fontified t face (rainbow-delimiters-depth-1-face)) 78 79 (fontified t face (rainbow-delimiters-depth-1-face)) 79 80 (fontified t face (rainbow-delimiters-depth-4-face)) 80 81 (fontified t) 81 88 (fontified t) 88 90 (fontified t) 90 91 (fontified t face (rainbow-delimiters-depth-4-face)) 91 94 (fontified t face font-lock-type-face) 94 95 (fontified t face (rainbow-delimiters-depth-1-face)) 95 96 (fontified t) 96 97 (fontified t face (rainbow-delimiters-depth-1-face)) 97 98 (fontified t face (rainbow-delimiters-depth-4-face)) 98 99 (fontified t face (rainbow-delimiters-depth-4-face)) 99 100 (fontified t face (rainbow-delimiters-depth-4-face)) 100 101 (fontified t) 101 102 (fontified t)) . 1750) (undo-tree-id1726 . -39) (undo-tree-id1727 . -43) (undo-tree-id1728 . -12) 1762) nil (25335 48323 669094 342000) 0 nil])
([nil nil ((#("            println!(\"{}\", successors.join(\" \"));
" 0 1 (fontified t ws-butler-chg delete) 1 12 (fontified t) 12 20 (fontified t face rust-builtin-formatting-macro) 20 21 (fontified t face (rainbow-delimiters-depth-4-face)) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face rust-string-interpolation) 23 24 (fontified t face rust-string-interpolation) 24 25 (fontified t face font-lock-string-face) 25 27 (fontified t) 27 42 (fontified t) 42 43 (fontified t face (rainbow-delimiters-depth-1-face)) 43 45 (fontified t face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t face (rainbow-delimiters-depth-1-face)) 47 48 (fontified t face (rainbow-delimiters-depth-4-face)) 48 49 (fontified t) 49 50 (fontified t)) . 1553) (undo-tree-id1722 . -12) (undo-tree-id1723 . -49) (undo-tree-id1724 . -23) (undo-tree-id1725 . -48) 1565) nil (25335 48323 669089 974000) 0 nil])
([nil nil ((1797 . 1798) (#("                                 " 0 1 (fontified nil ws-butler-chg delete) 1 12 (fontified nil ws-butler-chg chg) 12 33 (fontified nil face font-lock-comment-delimiter-face ws-butler-chg chg)) . 1797) (undo-tree-id1718 . -12) (undo-tree-id1719 . -12) (undo-tree-id1720 . -12) (undo-tree-id1721 . -12) (#("
" 0 1 (fontified t face font-lock-comment-face)) . -1797) (apply 3 1798 1853 undo--wrap-and-run-primitive-undo 1798 1853 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -1810)))) nil (25335 48323 669221 425000) 0 nil])
([nil nil ((apply 3 1736 1817 undo--wrap-and-run-primitive-undo 1736 1817 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -1748) 1797))) nil (25335 48326 180815 153000) 0 nil] [nil nil ((1798 . 1813) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 1798) (1797 . 1798)) ((#("
" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . 1797) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (nil ws-butler-chg delete 1799 . 1800) (1798 . 1799) (#("            // " 0 12 (fontified t ws-butler-chg chg) 12 15 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face)) . 1798) (undo-tree-id1744 . -15) (undo-tree-id1745 . -15) (undo-tree-id1746 . -15)) (25335 48323 669073 22000) 0 nil])
([nil nil ((#("            println!(\"successors\");
" 0 1 (fontified t) 1 12 (fontified t) 12 20 (fontified t face rust-builtin-formatting-macro) 20 21 (fontified t face (rainbow-delimiters-depth-4-face)) 21 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t face (rainbow-delimiters-depth-4-face)) 34 35 (fontified t) 35 36 (fontified t)) . 1700) (undo-tree-id1872 . -36) (undo-tree-id1873 . -36) (undo-tree-id1874 . -34) (undo-tree-id1875 . -36) (undo-tree-id1876 . -34) (undo-tree-id1877 . -34) (undo-tree-id1878 . -34) (undo-tree-id1879 . -34) (undo-tree-id1880 . -34) (undo-tree-id1881 . -34) (undo-tree-id1882 . -34) (undo-tree-id1883 . -34) (undo-tree-id1884 . -34) (undo-tree-id1885 . -34) (undo-tree-id1886 . -34) (undo-tree-id1887 . -34) (undo-tree-id1888 . -34) (undo-tree-id1889 . -34) (undo-tree-id1890 . -34) (undo-tree-id1891 . -34) (undo-tree-id1892 . -34) (undo-tree-id1893 . -34) (undo-tree-id1894 . -34) (undo-tree-id1895 . -34) (undo-tree-id1896 . -34) (undo-tree-id1897 . -34) (undo-tree-id1898 . -34) (undo-tree-id1899 . -34) (undo-tree-id1900 . -34) (undo-tree-id1901 . -34) (undo-tree-id1902 . -34) (undo-tree-id1903 . -34) (undo-tree-id1904 . -34) (undo-tree-id1905 . -34) (undo-tree-id1906 . -34) (undo-tree-id1907 . -34) (undo-tree-id1908 . -34) (undo-tree-id1909 . -34) (undo-tree-id1910 . -34) (undo-tree-id1911 . -34) (undo-tree-id1912 . -34) (undo-tree-id1913 . -34) (undo-tree-id1914 . -34) 1734 (t 25335 48326 744943 708000)) nil (25335 48331 920763 126000) 0 nil])
nil
([nil nil ((1743 . 1744) (#(" " 0 1 (fontified t face font-lock-string-face)) . -1743) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) 1744 (#("Blocks" 0 6 (fontified t face font-lock-string-face)) . -1744) (undo-tree-id1819 . -6) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -2) (undo-tree-id1827 . -1) (undo-tree-id1828 . -2) (undo-tree-id1829 . -2) (undo-tree-id1830 . -2) (undo-tree-id1831 . -2) (undo-tree-id1832 . -2) (undo-tree-id1833 . -3) (undo-tree-id1834 . -2) (undo-tree-id1835 . -3) (undo-tree-id1836 . -3) (undo-tree-id1837 . -3) (undo-tree-id1838 . -3) (undo-tree-id1839 . -3) (undo-tree-id1840 . -4) (undo-tree-id1841 . -3) (undo-tree-id1842 . -4) (undo-tree-id1843 . -4) (undo-tree-id1844 . -4) (undo-tree-id1845 . -4) (undo-tree-id1846 . -4) (undo-tree-id1847 . -5) (undo-tree-id1848 . -4) (undo-tree-id1849 . -5) (undo-tree-id1850 . -5) (undo-tree-id1851 . -5) (undo-tree-id1852 . -5) (undo-tree-id1853 . -5) (undo-tree-id1854 . -5) (undo-tree-id1855 . -5) (undo-tree-id1856 . -5) (undo-tree-id1857 . -5) (undo-tree-id1858 . -5) (undo-tree-id1859 . -6) (undo-tree-id1860 . -5) (undo-tree-id1861 . -6) (undo-tree-id1862 . -6) (undo-tree-id1863 . -6) (undo-tree-id1864 . -6) (undo-tree-id1865 . -6) (undo-tree-id1866 . -6) (undo-tree-id1867 . -6) (undo-tree-id1868 . -6) (undo-tree-id1869 . -6) (undo-tree-id1870 . -6) (undo-tree-id1871 . -6) 1750) nil (25335 48331 920726 977000) 0 nil])
([nil nil ((1718 . 1758) (1646 . 1686) (t 25335 48332 313150 795000)) nil (25335 48347 558478 777000) 0 nil])
([nil nil ((2459 . 2461) (2459 . 2460) (#("parsing " 0 8 (fontified t face font-lock-string-face)) . -2459) (undo-tree-id1917 . -8) (undo-tree-id1918 . -8) (undo-tree-id1919 . -8) 2467 (#("f" 0 1 (fontified t face font-lock-string-face)) . -2467) (undo-tree-id1920 . -1) 2468 (t 25335 48347 581717 877000)) nil (25335 48382 780728 268000) 0 nil])
([nil nil ((2465 . 2469) (2461 . 2465) (#("p" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2461) (undo-tree-id1915 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2462) (undo-tree-id1916 . -1) 2463 (2461 . 2463)) nil (25335 48382 780720 83000) 0 nil])
([nil nil ((2469 . 2477) (#("C" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -2469) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) 2470 (2469 . 2470) (#("Function" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 8 (fontified t face font-lock-string-face)) . -2469) (undo-tree-id1944 . -8) (undo-tree-id1945 . -8) (undo-tree-id1946 . -8) (undo-tree-id1947 . -8) (undo-tree-id1948 . -8) (undo-tree-id1949 . -8) (undo-tree-id1950 . -8) (undo-tree-id1951 . -8) (undo-tree-id1952 . -8) (undo-tree-id1953 . -8) (undo-tree-id1954 . -8) (undo-tree-id1955 . -8) (undo-tree-id1956 . -8) (undo-tree-id1957 . -8) (undo-tree-id1958 . -8) (undo-tree-id1959 . -8) (undo-tree-id1960 . -8) (undo-tree-id1961 . -8) (undo-tree-id1962 . -8) (undo-tree-id1963 . -8) (undo-tree-id1964 . -8) (undo-tree-id1965 . -8) (undo-tree-id1966 . -8) (undo-tree-id1967 . -8) (undo-tree-id1968 . -8) 2477 (t 25335 48383 75032 3000)) nil (25335 48397 444707 939000) 0 nil])
([nil nil ((2053 . 2056) (2051 . 2053) (#("parsing" 0 7 (fontified t face font-lock-string-face)) . -2051) (undo-tree-id1969 . -7) 2058 (t 25335 48397 675571 53000)) nil (25335 48407 875727 753000) 0 nil])
([nil nil ((2051 . 2055) (t 25335 48408 43953 313000)) nil (25335 48411 15992 252000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face font-lock-string-face)) . 2060) (t 25335 48411 496080 491000)) nil (25335 48415 89254 304000) 0 nil])
([nil nil ((2051 . 2057) (t 25335 48415 876241 786000)) nil (25335 48421 558719 391000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -944) (undo-tree-id1978 . -4) 948 (943 . 948) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 943) (undo-tree-id1979 . -4) (undo-tree-id1980 . -4) 947 (942 . 947) (t 25335 48421 744457 773000) 941) nil (25335 48526 218479 992000) 0 nil])
([nil nil ((nil rear-nonsticky nil 948 . 949) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -982) (944 . 983)) nil (25335 48526 218474 932000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil ws-butler-chg chg)) . -987) (undo-tree-id1970 . -4) (undo-tree-id1971 . -4) (undo-tree-id1972 . -4) (undo-tree-id1973 . -4) (undo-tree-id1974 . -4) (undo-tree-id1975 . -4) (undo-tree-id1976 . -4) (undo-tree-id1977 . -4) (991 . 992) (982 . 991)) nil (25335 48526 218471 986000) 0 nil])
([nil nil ((#("

    for block in blocks.into_iter() {
    }
" 0 1 (fontified t) 1 2 (fontified t) 2 5 (fontified t) 5 6 (fontified t rear-nonsticky t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t) 16 18 (fontified t face font-lock-keyword-face) 18 26 (fontified t) 26 35 (fontified t) 35 36 (fontified t face (rainbow-delimiters-depth-2-face)) 36 37 (fontified t face (rainbow-delimiters-depth-2-face)) 37 38 (fontified t) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 44 (fontified t) 44 45 (fontified t face (rainbow-delimiters-depth-2-face)) 45 46 (fontified t)) . 943) (undo-tree-id1998 . -40) (undo-tree-id1999 . 1) (undo-tree-id2000 . -40) (undo-tree-id2001 . -2) (undo-tree-id2002 . -39) (undo-tree-id2003 . -40) (t 25335 48526 244282 668000)) nil (25335 48592 892570 723000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -362) (undo-tree-id1997 . -4) 366 (361 . 366) 324) nil (25335 48592 892567 76000) 0 nil])
([nil nil ((nil rear-nonsticky nil 366 . 367) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -837) (362 . 838)) nil (25335 48592 892565 843000) 0 nil])
([nil nil ((#("        debugout += &format!(\"          {:>3}: {:<30} {:<100} {}\\n\",
                             id, opcode, operand, instr[\"type\"]);
" 0 1 (fontified t ws-butler-chg chg) 1 7 (fontified t ws-butler-chg chg) 7 8 (rear-nonsticky t fontified t ws-butler-chg chg) 8 20 (fontified t ws-butler-chg chg) 20 21 (fontified t ws-butler-chg chg face rust-ampersand-face) 21 27 (fontified t ws-butler-chg chg face rust-builtin-formatting-macro) 27 28 (fontified t ws-butler-chg chg face rust-builtin-formatting-macro) 28 29 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face)) 29 40 (fontified t ws-butler-chg chg face font-lock-string-face) 40 41 (fontified t ws-butler-chg chg face rust-string-interpolation) 41 42 (fontified t ws-butler-chg chg face rust-string-interpolation) 42 43 (fontified t ws-butler-chg chg syntax-table (1) face rust-string-interpolation) 43 44 (fontified t ws-butler-chg chg face rust-string-interpolation) 44 45 (fontified t ws-butler-chg chg face rust-string-interpolation) 45 47 (fontified t ws-butler-chg chg face font-lock-string-face) 47 48 (fontified t ws-butler-chg chg face rust-string-interpolation) 48 49 (fontified t ws-butler-chg chg face rust-string-interpolation) 49 50 (fontified t ws-butler-chg chg syntax-table (1) face rust-string-interpolation) 50 51 (fontified t ws-butler-chg chg face rust-string-interpolation) 51 52 (fontified t ws-butler-chg chg face rust-string-interpolation) 52 53 (fontified t ws-butler-chg chg face rust-string-interpolation) 53 54 (fontified t ws-butler-chg chg face font-lock-string-face) 54 55 (fontified t ws-butler-chg chg face rust-string-interpolation) 55 56 (fontified t ws-butler-chg chg face rust-string-interpolation) 56 57 (fontified t ws-butler-chg chg syntax-table (1) face rust-string-interpolation) 57 60 (fontified t ws-butler-chg chg face rust-string-interpolation) 60 61 (fontified t ws-butler-chg chg face rust-string-interpolation) 61 62 (fontified t ws-butler-chg chg face font-lock-string-face) 62 64 (fontified t ws-butler-chg chg face rust-string-interpolation) 64 65 (fontified t ws-butler-chg chg face font-lock-string-face) 65 66 (fontified t ws-butler-chg chg face font-lock-string-face) 66 67 (fontified t ws-butler-chg chg face font-lock-string-face) 67 68 (fontified t ws-butler-chg chg) 68 98 (fontified t ws-butler-chg chg) 98 99 (fontified t ws-butler-chg chg) 99 100 (fontified t ws-butler-chg chg) 100 101 (fontified t ws-butler-chg chg) 101 102 (fontified t ws-butler-chg chg) 102 109 (fontified t ws-butler-chg chg) 109 110 (fontified t ws-butler-chg chg) 110 111 (fontified t ws-butler-chg chg) 111 117 (fontified t ws-butler-chg chg) 117 119 (fontified t ws-butler-chg chg) 119 124 (fontified t ws-butler-chg chg) 124 125 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-4-face)) 125 130 (fontified t ws-butler-chg chg face font-lock-string-face) 130 131 (fontified t ws-butler-chg chg face font-lock-string-face) 131 132 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-4-face)) 132 133 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face)) 133 134 (fontified t ws-butler-chg chg) 134 135 (fontified t ws-butler-chg chg)) . 697) (undo-tree-id1990 . -111) (undo-tree-id1991 . 92) (undo-tree-id1992 . -42) (undo-tree-id1993 . -111) (undo-tree-id1994 . -111) (undo-tree-id1995 . -42) (undo-tree-id1996 . -111) 808) nil (25335 48592 892564 932000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t ws-butler-chg chg)) . 696) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1)) nil (25335 48592 892559 742000) 0 nil])
([nil nil ((384 . 385) (382 . 384) (377 . 382) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -377) (undo-tree-id1983 . -1) 378 (371 . 378) (367 . 371) (362 . 367) (696 . 705) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 696) (undo-tree-id1984 . -8) 704 (695 . 704)) nil (25335 48592 892556 686000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t ws-butler-chg chg)) . -386) (undo-tree-id1982 . -1) 387 (385 . 387)) nil (25335 48592 892554 351000) 0 nil])
([nil nil ((nil rear-nonsticky nil 390 . 391) (#("
" 0 1 (ws-butler-chg chg fontified nil)) . -410) (386 . 411) 385) nil (25335 48592 892553 219000) 0 nil])
([nil nil ((381 . 382) (395 . 402) (#("opcode" 0 6 (ws-butler-chg chg fontified t face font-lock-variable-name-face)) . -395) (undo-tree-id1981 . -6) 401) nil (25335 48592 892552 548000) 0 nil])
([nil nil ((#("        " 0 8 (ws-butler-chg chg fontified t)) . 747) 381) nil (25335 48592 892540 936000) 0 nil])
([nil nil ((#("        let id     = instr[\"id\"].as_u64().unwrap();
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-variable-name-face) 14 15 (fontified t) 15 19 (fontified t) 19 21 (fontified t) 21 26 (fontified t) 26 27 (fontified t face (rainbow-delimiters-depth-3-face)) 27 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 32 (fontified t face (rainbow-delimiters-depth-3-face)) 32 33 (fontified t) 33 39 (fontified t) 39 40 (fontified t face (rainbow-delimiters-depth-3-face)) 40 41 (fontified t face (rainbow-delimiters-depth-3-face)) 41 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-3-face)) 49 50 (fontified t face (rainbow-delimiters-depth-3-face)) 50 51 (fontified t) 51 52 (fontified t)) . 457) (undo-tree-id2022 . -18) (undo-tree-id2023 . -52) 475 (t 25335 48592 922704 529000)) nil (25335 48654 6887 342000) 0 nil])
([nil nil ((757 . 758) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 757) (undo-tree-id2004 . -1) (756 . 757) (755 . 757) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -755) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (751 . 756) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 751) (undo-tree-id2007 . -1) (750 . 751) (749 . 751) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -749) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (742 . 750) (#(")" 0 1 (fontified nil ws-butler-chg chg)) . 742) (741 . 742) (740 . 742) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -740) (740 . 741) (730 . 740) (724 . 730) (#("opc" 0 3 (fontified t ws-butler-chg chg)) . -724) (undo-tree-id2010 . -3) 727 (724 . 727) (722 . 724) (717 . 722) (#("+" 0 1 (fontified t ws-butler-chg chg)) . -717) (undo-tree-id2011 . -1) (#("_" 0 1 (fontified t ws-butler-chg chg)) . -718) (undo-tree-id2012 . -1) 719 (713 . 719) (#("v" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -713) (undo-tree-id2013 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -714) (undo-tree-id2014 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -715) (undo-tree-id2015 . -1) 716 (707 . 716) (703 . 707) (#("cur" 0 3 (fontified t ws-butler-chg chg)) . -703) (undo-tree-id2016 . -3) 706 (703 . 706) (#("if " 0 2 (fontified t ws-butler-chg chg face font-lock-keyword-face) 2 3 (fontified t ws-butler-chg chg)) . -703) (undo-tree-id2017 . -3) 706 (#("opcod" 0 5 (fontified t ws-butler-chg chg)) . -706) (undo-tree-id2018 . -5) 711 (706 . 711) (#("c" 0 1 (fontified t ws-butler-chg chg)) . -706) (undo-tree-id2019 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -707) (undo-tree-id2020 . -1) 708 (706 . 708) (703 . 706) (694 . 703) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 694) (undo-tree-id2021 . -8) 702 (694 . 702)) nil (25335 48654 6880 218000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . -759) (undo-tree-id2155 . -8) (undo-tree-id2156 . -8) 767 (758 . 767) (t 25335 48654 28912 977000) 757) nil (25335 48679 169265 137000) 0 nil])
([nil nil ((nil rear-nonsticky nil 766 . 767) (#("
" 0 1 (ws-butler-chg chg fontified nil)) . -822) (758 . 823) 695) nil (25335 48679 169262 502000) 0 nil])
([nil nil ((790 . 797) (#("opcode" 0 6 (fontified t ws-butler-chg chg)) . -790) (undo-tree-id2024 . -6) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -2) (undo-tree-id2037 . -1) (undo-tree-id2038 . -2) (undo-tree-id2039 . -2) (undo-tree-id2040 . -2) (undo-tree-id2041 . -2) (undo-tree-id2042 . -2) (undo-tree-id2043 . -2) (undo-tree-id2044 . -2) (undo-tree-id2045 . -2) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (undo-tree-id2048 . -3) (undo-tree-id2049 . -2) (undo-tree-id2050 . -3) (undo-tree-id2051 . -3) (undo-tree-id2052 . -3) (undo-tree-id2053 . -3) (undo-tree-id2054 . -3) (undo-tree-id2055 . -3) (undo-tree-id2056 . -3) (undo-tree-id2057 . -3) (undo-tree-id2058 . -3) (undo-tree-id2059 . -3) (undo-tree-id2060 . -4) (undo-tree-id2061 . -3) (undo-tree-id2062 . -4) (undo-tree-id2063 . -4) (undo-tree-id2064 . -4) (undo-tree-id2065 . -4) (undo-tree-id2066 . -4) (undo-tree-id2067 . -4) (undo-tree-id2068 . -4) (undo-tree-id2069 . -4) (undo-tree-id2070 . -4) (undo-tree-id2071 . -4) (undo-tree-id2072 . -5) (undo-tree-id2073 . -4) (undo-tree-id2074 . -5) (undo-tree-id2075 . -5) (undo-tree-id2076 . -5) (undo-tree-id2077 . -5) (undo-tree-id2078 . -5) (undo-tree-id2079 . -5) (undo-tree-id2080 . -5) (undo-tree-id2081 . -5) (undo-tree-id2082 . -5) (undo-tree-id2083 . -5) (undo-tree-id2084 . -6) (undo-tree-id2085 . -5) (undo-tree-id2086 . -6) (undo-tree-id2087 . -6) (undo-tree-id2088 . -6) (undo-tree-id2089 . -6) (undo-tree-id2090 . -6) (undo-tree-id2091 . -6) (undo-tree-id2092 . -6) (undo-tree-id2093 . -6) (undo-tree-id2094 . -6) (undo-tree-id2095 . -6) (undo-tree-id2096 . -6) 796 (722 . 723) (775 . 782) (#("opcode" 0 6 (fontified t ws-butler-chg chg face font-lock-variable-name-face)) . -775) (undo-tree-id2097 . -6) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -2) (undo-tree-id2105 . -1) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -3) (undo-tree-id2112 . -2) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -4) (undo-tree-id2119 . -3) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -5) (undo-tree-id2131 . -4) (undo-tree-id2132 . -5) (undo-tree-id2133 . -5) (undo-tree-id2134 . -5) (undo-tree-id2135 . -5) (undo-tree-id2136 . -5) (undo-tree-id2137 . -5) (undo-tree-id2138 . -5) (undo-tree-id2139 . -5) (undo-tree-id2140 . -5) (undo-tree-id2141 . -5) (undo-tree-id2142 . -6) (undo-tree-id2143 . -5) (undo-tree-id2144 . -6) (undo-tree-id2145 . -6) (undo-tree-id2146 . -6) (undo-tree-id2147 . -6) (undo-tree-id2148 . -6) (undo-tree-id2149 . -6) (undo-tree-id2150 . -6) (undo-tree-id2151 . -6) (undo-tree-id2152 . -6) (undo-tree-id2153 . -6) (undo-tree-id2154 . -6) 781) nil (25335 48679 169257 923000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 826) (undo-tree-id2171 . -1) (t 25335 48679 193819 697000)) nil (25335 48700 196289 416000) 0 nil])
([nil nil ((893 . 907) (#("cur" 0 3 (fontified t ws-butler-chg chg)) . -893) (undo-tree-id2157 . -3) (undo-tree-id2158 . -3) (undo-tree-id2159 . -2) (undo-tree-id2160 . -3) (undo-tree-id2161 . -3) (undo-tree-id2162 . -3) (undo-tree-id2163 . -3) (undo-tree-id2164 . -3) (undo-tree-id2165 . -3) 896 (893 . 896) (891 . 893) (890 . 891) (880 . 890) (#("opcode_" 0 7 (fontified t ws-butler-chg chg)) . -880) (undo-tree-id2166 . -7) 887 (886 . 887) (880 . 886) (#("op" 0 2 (fontified t ws-butler-chg chg)) . -880) (undo-tree-id2167 . -2) 882 (880 . 882) (868 . 880) (#("        " 0 8 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 868) (867 . 885) (866 . 868) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -866) (866 . 867) (865 . 866) (855 . 865) (#("op" 0 2 (fontified t ws-butler-chg chg)) . -855) (undo-tree-id2168 . -2) 857 (855 . 857) (853 . 855) (852 . 853) (838 . 852) (#("cur" 0 3 (fontified t ws-butler-chg chg)) . -838) (undo-tree-id2169 . -3) 841 (838 . 841) (835 . 838) (826 . 835) (#("        " 0 8 (fontified t ws-butler-chg chg)) . 826) (undo-tree-id2170 . -8) 834 (825 . 834) 760) nil (25335 48700 196283 816000) 0 nil])
([nil nil ((#("        " 0 8 (fontified t ws-butler-chg chg)) . -918) (undo-tree-id2207 . -8) (undo-tree-id2208 . -8) (undo-tree-id2209 . -8) (undo-tree-id2210 . -8) (undo-tree-id2211 . -8) (undo-tree-id2212 . -8) (undo-tree-id2213 . -8) (undo-tree-id2214 . -8) (undo-tree-id2215 . -8) (undo-tree-id2216 . -8) (undo-tree-id2217 . -8) (undo-tree-id2218 . -8) (undo-tree-id2219 . -8) (undo-tree-id2220 . -8) (undo-tree-id2221 . -8) (undo-tree-id2222 . -8) (undo-tree-id2223 . -8) (undo-tree-id2224 . -8) (undo-tree-id2225 . -8) (undo-tree-id2226 . -8) (undo-tree-id2227 . -8) (undo-tree-id2228 . -8) (undo-tree-id2229 . -8) 926 (917 . 926) (t 25335 48700 226576 372000) 916) nil (25335 48710 887356 135000) 0 nil])
([nil nil ((nil rear-nonsticky nil 926 . 927) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -1009) (918 . 1010)) nil (25335 48710 887344 963000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 30) (998 . 999) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (980 . 981) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (954 . 955) (apply deactivate-cursor-after-undo 28) (940 . 941) (apply activate-cursor-for-undo 30) (994 . 995) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (977 . 978) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (952 . 953) (apply deactivate-cursor-after-undo 28) (939 . 940) (apply activate-cursor-for-undo 30) (990 . 991) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (974 . 975) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (950 . 951) (apply deactivate-cursor-after-undo 28) (938 . 939) (apply activate-cursor-for-undo 30) (986 . 987) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (971 . 972) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (948 . 949) (apply deactivate-cursor-after-undo 28) (937 . 938) (apply activate-cursor-for-undo 30) (982 . 983) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (968 . 969) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (946 . 947) (apply deactivate-cursor-after-undo 28) (936 . 937) (apply activate-cursor-for-undo 30) (978 . 979) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (965 . 966) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (944 . 945) (apply deactivate-cursor-after-undo 28) (935 . 936) (apply activate-cursor-for-undo 30) (974 . 975) (#("opcode" 0 6 (fontified nil ws-butler-chg chg)) . -974) (undo-tree-id2172 . -6) (apply deactivate-cursor-after-undo 30) (apply activate-cursor-for-undo 29) (962 . 963) (#("opcode" 0 6 (fontified t ws-butler-chg chg)) . -962) (undo-tree-id2173 . -6) (apply deactivate-cursor-after-undo 29) (apply activate-cursor-for-undo 28) (942 . 943) (#("opcode" 0 6 (fontified nil ws-butler-chg chg)) . -942) (undo-tree-id2174 . -6) (apply deactivate-cursor-after-undo 28) (934 . 935) (#("opcode" 0 6 (fontified t ws-butler-chg chg)) . -934) (undo-tree-id2175 . -6) (undo-tree-id2176 . -6) (undo-tree-id2177 . -6) (undo-tree-id2178 . -6) (undo-tree-id2179 . -6) (undo-tree-id2180 . -6) (undo-tree-id2181 . -6) (undo-tree-id2182 . -6) (undo-tree-id2183 . -6) (undo-tree-id2184 . -6) (undo-tree-id2185 . -6) (undo-tree-id2186 . -6) (undo-tree-id2187 . -6) (undo-tree-id2188 . -6) (undo-tree-id2189 . -6) (undo-tree-id2190 . -6) (undo-tree-id2191 . -6) (undo-tree-id2192 . -6) (undo-tree-id2193 . -6) (undo-tree-id2194 . -6) (undo-tree-id2195 . -6) (undo-tree-id2196 . -6) (undo-tree-id2197 . -6) (undo-tree-id2198 . -6) (undo-tree-id2199 . -6) (undo-tree-id2200 . -6) (undo-tree-id2201 . -6) (undo-tree-id2202 . -6) (undo-tree-id2203 . -6) (undo-tree-id2204 . -6) (undo-tree-id2205 . -6) (undo-tree-id2206 . -6) 940) nil (25335 48710 887340 134000) 0 nil])
([nil nil ((907 . 908) (1003 . 1004) (t 25335 48711 306974 606000)) nil (25335 48714 850014 739000) 0 nil])
([nil nil ((400 . 404) (371 . 375) (t 25335 48715 379120 893000)) nil (25335 48726 725357 352000) 0 nil])
([nil nil ((#("        let cur_opcode_len  = opcode.as_string().unwrap().len();
        let cur_operand_len = operand.as_string().unwrap().len();
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 26 (fontified t face font-lock-variable-name-face) 26 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t) 30 37 (fontified t) 37 46 (fontified t) 46 47 (fontified t face (rainbow-delimiters-depth-3-face)) 47 48 (fontified t face (rainbow-delimiters-depth-3-face)) 48 55 (fontified t) 55 56 (fontified t face (rainbow-delimiters-depth-3-face)) 56 57 (fontified t face (rainbow-delimiters-depth-3-face)) 57 61 (fontified t) 61 62 (fontified t face (rainbow-delimiters-depth-3-face)) 62 63 (fontified t face (rainbow-delimiters-depth-3-face)) 63 64 (fontified t) 64 65 (fontified t) 65 72 (fontified t) 72 73 (rear-nonsticky t fontified t) 73 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 88 (fontified t face font-lock-variable-name-face) 88 89 (fontified t face font-lock-variable-name-face) 89 92 (fontified t face font-lock-variable-name-face) 92 102 (fontified t) 102 103 (fontified t) 103 112 (fontified t) 112 113 (fontified t face (rainbow-delimiters-depth-3-face)) 113 114 (fontified t face (rainbow-delimiters-depth-3-face)) 114 121 (fontified t) 121 122 (fontified t face (rainbow-delimiters-depth-3-face)) 122 123 (fontified t face (rainbow-delimiters-depth-3-face)) 123 127 (fontified t) 127 128 (fontified t face (rainbow-delimiters-depth-3-face)) 128 129 (fontified t face (rainbow-delimiters-depth-3-face)) 129 130 (fontified t) 130 131 (fontified t)) . 703) (undo-tree-id2380 . -121) (undo-tree-id2381 . 74) (undo-tree-id2382 . -56) (undo-tree-id2383 . -121) (undo-tree-id2384 . -121) (undo-tree-id2385 . 10) (undo-tree-id2386 . -122) (undo-tree-id2387 . 9) (undo-tree-id2388 . -123) (undo-tree-id2389 . -56) (undo-tree-id2390 . -121) 824 (t 25335 48726 799530 958000)) nil (25335 48758 373868 95000) 0 nil])
([nil nil ((nil ws-butler-chg delete 834 . 835) (703 . 834)) nil (25335 48758 373839 310000) 0 nil])
([nil nil ((#("as_string().unwrap()." 0 9 (fontified t) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 11 (fontified t face (rainbow-delimiters-depth-3-face)) 11 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 20 (fontified t face (rainbow-delimiters-depth-3-face)) 20 21 (fontified t)) . -785) (undo-tree-id2230 . -18) (undo-tree-id2231 . -21) (undo-tree-id2232 . -18) (undo-tree-id2233 . -18) (undo-tree-id2234 . -18) (undo-tree-id2235 . -2) (undo-tree-id2236 . -21) (undo-tree-id2237 . -2) (undo-tree-id2238 . -2) (undo-tree-id2239 . -2) (undo-tree-id2240 . -2) (undo-tree-id2241 . -2) (undo-tree-id2242 . -2) (undo-tree-id2243 . -2) (undo-tree-id2244 . -2) (undo-tree-id2245 . -2) (undo-tree-id2246 . -2) (undo-tree-id2247 . -9) (undo-tree-id2248 . -2) (undo-tree-id2249 . -9) (undo-tree-id2250 . -9) (undo-tree-id2251 . -9) (undo-tree-id2252 . -9) (undo-tree-id2253 . -9) (undo-tree-id2254 . -9) (undo-tree-id2255 . -9) (undo-tree-id2256 . -9) (undo-tree-id2257 . -9) (undo-tree-id2258 . -9) (undo-tree-id2259 . -18) (undo-tree-id2260 . -9) (undo-tree-id2261 . -18) (undo-tree-id2262 . -18) (undo-tree-id2263 . -18) (undo-tree-id2264 . -18) (undo-tree-id2265 . -18) (undo-tree-id2266 . -18) (undo-tree-id2267 . -18) (undo-tree-id2268 . -18) (undo-tree-id2269 . -18) (undo-tree-id2270 . -18) (undo-tree-id2271 . -18) (undo-tree-id2272 . -21) (undo-tree-id2273 . -21) (undo-tree-id2274 . -21) (undo-tree-id2275 . -21) (undo-tree-id2276 . -21) (undo-tree-id2277 . -21) (undo-tree-id2278 . -21) (undo-tree-id2279 . -21) (undo-tree-id2280 . -21) (undo-tree-id2281 . -21) (undo-tree-id2282 . -21) (undo-tree-id2283 . -21) (undo-tree-id2284 . -21) (undo-tree-id2285 . -21) (undo-tree-id2286 . -21) (undo-tree-id2287 . -21) (undo-tree-id2288 . -21) 806 (#("a" 0 1 (fontified t)) . -740) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) 741 (#("s_string().unwrap()." 0 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 10 (fontified t face (rainbow-delimiters-depth-3-face)) 10 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-3-face)) 18 19 (fontified t face (rainbow-delimiters-depth-3-face)) 19 20 (fontified t)) . 741) (undo-tree-id2356 . -20) (undo-tree-id2357 . 1) (undo-tree-id2358 . -18) (undo-tree-id2359 . -20) (undo-tree-id2360 . -2) (undo-tree-id2361 . -11) (undo-tree-id2362 . -2) (undo-tree-id2363 . -2) (undo-tree-id2364 . -2) (undo-tree-id2365 . -2) (undo-tree-id2366 . -2) (undo-tree-id2367 . -1) (undo-tree-id2368 . -2) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (t 25335 48726 799530 958000)) nil (25335 48758 373834 451000) 0 nil])
([nil nil ((1383 . 1385) (#("p" 0 1 (fontified t ws-butler-chg chg face rust-string-interpolation)) . -1383) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . -1) (undo-tree-id2425 . -1) (undo-tree-id2426 . -1) (undo-tree-id2427 . -1) (undo-tree-id2428 . -1) (undo-tree-id2429 . -1) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (#("r" 0 1 (fontified t ws-butler-chg chg face rust-string-interpolation)) . -1384) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . -1) (undo-tree-id2481 . -1) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) 1385 (1382 . 1385) (#("100" 0 3 (fontified t face rust-string-interpolation)) . -1382) (undo-tree-id2484 . -3) (undo-tree-id2485 . -3) (undo-tree-id2486 . -3) (undo-tree-id2487 . -3) (undo-tree-id2488 . -3) (undo-tree-id2489 . -3) (undo-tree-id2490 . -3) (undo-tree-id2491 . -3) (undo-tree-id2492 . -3) (undo-tree-id2493 . -3) (undo-tree-id2494 . -3) (undo-tree-id2495 . -3) (undo-tree-id2496 . -3) 1385 (1374 . 1377) (#("3" 0 1 (fontified t face rust-string-interpolation)) . -1374) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (#("0" 0 1 (fontified t face rust-string-interpolation)) . -1375) (undo-tree-id2500 . -1) 1376 (t 25335 48758 972684 732000)) nil (25335 48799 418995 843000) 0 nil])
([nil nil ((1507 . 1508) (1505 . 1507) (1504 . 1505) (1526 . 1527) (1524 . 1526) (1523 . 1524) (1512 . 1523) (#("op" 0 2 (fontified t ws-butler-chg chg)) . -1512) (undo-tree-id2391 . -2) 1514 (1512 . 1514) (1510 . 1512) (1507 . 1510) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -1507) (undo-tree-id2392 . -1) 1508 (1506 . 1508) (1465 . 1494) (#(" " 0 1 (fontified nil ws-butler-chg chg)) . 1465) (1464 . 1465) (1475 . 1477) (1465 . 1475) (#("op" 0 2 (fontified t ws-butler-chg chg)) . -1465) (undo-tree-id2393 . -2) 1467 (1465 . 1467) (1463 . 1465) (1459 . 1463) (1457 . 1459)) nil (25335 48799 418942 370000) 0 nil])
([nil nil ((1464 . 1465) (#("                             " 0 1 (fontified nil ws-butler-chg delete) 1 29 (fontified nil)) . 1464) (#("
" 0 1 (fontified t)) . -1464) (undo-tree-id2535 . -1) 1529 (t 25335 48799 558137 242000)) nil (25335 48805 412252 621000) 0 nil])
([nil nil ((1458 . 1488) (#(" " 0 1 (fontified t)) . 1458) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . -1) (undo-tree-id2512 . -1) (undo-tree-id2513 . -1) (undo-tree-id2514 . -1) (undo-tree-id2515 . -1) (undo-tree-id2516 . -1) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) 1459) nil (25335 48805 412248 92000) 0 nil])
([nil nil ((1374 . 1375) (1382 . 1383) (t 25335 48805 590352 846000)) nil (25335 48827 576384 885000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t face rust-string-interpolation)) . 1374) (t 25335 48827 767144 929000)) nil (25335 48858 968864 219000) 0 nil])
([nil nil ((1387 . 1388) (1377 . 1378)) nil (25335 48858 968863 467000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t face rust-string-interpolation)) . 1383) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1)) nil (25335 48858 968860 672000) 0 nil])
([nil nil ((3196 . 3198) (3170 . 3174) (t 25335 48858 996258 876000)) nil (25335 48997 149026 602000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-string-face)) . 3197) (t 25335 48997 841192 993000)) nil (25335 49005 209379 148000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 3196) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) (undo-tree-id2614 . -1) (undo-tree-id2615 . -1) (undo-tree-id2616 . -1) (undo-tree-id2617 . -1) (undo-tree-id2618 . -1) (undo-tree-id2619 . -1) (undo-tree-id2620 . -1) (undo-tree-id2621 . -1) (undo-tree-id2622 . -1) (undo-tree-id2623 . -1) (undo-tree-id2624 . -1) (undo-tree-id2625 . -1) (undo-tree-id2626 . -1)) nil (25335 49005 209375 712000) 0 nil])
([nil nil ((2991 . 2992) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2991) (undo-tree-id2627 . -1) (undo-tree-id2628 . -1) (undo-tree-id2629 . -1) (undo-tree-id2630 . -1) (undo-tree-id2631 . -1) (undo-tree-id2632 . -1) (undo-tree-id2633 . -1) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -1) (undo-tree-id2637 . -1) (undo-tree-id2638 . -1) (undo-tree-id2639 . -1) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -1) (undo-tree-id2644 . -1) 2992 (2985 . 2992) (2981 . 2985) (2978 . 2981) (2976 . 2978) (2971 . 2976) (2966 . 2971) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . -2966) (undo-tree-id2645 . -1) (2962 . 2967) (2958 . 2962) (2954 . 2958) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2954) (undo-tree-id2646 . -1) 2955 (2952 . 2955) (2949 . 2952) (2944 . 2949) (t 25335 49005 229454 813000)) nil (25335 49105 952317 942000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-comment-face)) . -2990) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (undo-tree-id2649 . -1) (undo-tree-id2650 . -1) (undo-tree-id2651 . -1) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) 2991 (2991 . 2992) (t 25335 49105 981018 781000)) nil (25335 49109 132501 899000) 0 nil])
([nil nil ((3111 . 3122) (3104 . 3111) (3100 . 3104) (3095 . 3100) (3090 . 3095) (3085 . 3090) (3082 . 3085) (3077 . 3082) (t 25335 49109 157130 944000)) nil (25335 49121 639151 258000) 0 nil])
([nil nil ((3212 . 3220) (3208 . 3212) (3203 . 3208) (3198 . 3203) (3196 . 3198) (#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3196) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) 3197 (3196 . 3197) (3188 . 3196) (3184 . 3188) (3180 . 3184) (3172 . 3180) (3169 . 3172) (3166 . 3169) (3161 . 3166) (t 25335 49122 149589 701000)) nil (25335 49138 80324 817000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3459) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) 3460 (3444 . 3455) (#(" " 0 1 (ws-butler-chg chg fontified nil face font-lock-comment-face)) . 3444) (3443 . 3444) (3446 . 3449) (#("m" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3446) (undo-tree-id2699 . -1) (#("e" 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3447) (undo-tree-id2700 . -1) 3448 (3444 . 3448) (3438 . 3444) (3434 . 3438) (3425 . 3434) (3420 . 3425) (3417 . 3420) (3413 . 3417) (3408 . 3413) (#("in " 0 3 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3408) (undo-tree-id2701 . -3) 3411 (#("this " 0 5 (ws-butler-chg chg fontified t face font-lock-comment-face)) . -3411) (undo-tree-id2702 . -5) 3416 (3411 . 3416) (3409 . 3411) (3408 . 3409) (3407 . 3408) (3388 . 3401) (3388 . 3394) (3384 . 3388) (3378 . 3384) (3375 . 3378) (3366 . 3375) (t 25335 49138 558168 829000)) nil (25335 49169 884968 832000) 0 nil])
([nil nil ((2949 . 2953) (2946 . 2949) (2942 . 2946) (2938 . 2942) (2930 . 2938) (2929 . 2930) (2872 . 2883) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 2872) (2871 . 2872) (2896 . 2897) (2858 . 2860) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2858) (undo-tree-id2703 . -1) 2859 (2854 . 2859) (2848 . 2854) (2844 . 2848) (2843 . 2844) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2843) (undo-tree-id2704 . -1) 2844 (2839 . 2844) (2834 . 2839) (2831 . 2834) (2824 . 2831) (2818 . 2824) (#("blocks " 0 7 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2818) (undo-tree-id2705 . -7) 2825 (#("in " 0 3 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -2825) (undo-tree-id2706 . -3) 2828 (2825 . 2828) (2818 . 2825) (2814 . 2818) (2807 . 2814) (2844 . 2855) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 2843) (undo-tree-id2707 . -1) (2844 . 2845) (2850 . 2853) (2844 . 2850) (2839 . 2844) (2834 . 2839) (2830 . 2834) (2827 . 2830) (2819 . 2827) (2814 . 2819) (2810 . 2814) (2807 . 2810) (2804 . 2807) (2795 . 2804) (t 25335 49170 443293 451000)) nil (25335 49239 245732 224000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . 2907) 2952) nil (25335 49239 245716 584000) 0 nil])
([nil nil ((485 . 493) (482 . 485) (478 . 482) (474 . 478) (468 . 474) (#("pretty " 0 7 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -468) (undo-tree-id2708 . -7) 475 (#("pro" 0 3 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -475) (undo-tree-id2709 . -3) 478 (475 . 478) (470 . 475) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -470) (undo-tree-id2710 . -1) 471 (468 . 471) (465 . 468) (460 . 465) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -460) (undo-tree-id2711 . -1) 461 (460 . 461) (457 . 460) (452 . 457) (440 . 447) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 440) (439 . 440) (440 . 445) (431 . 440) (427 . 431) (420 . 427) (#("ele" 0 3 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -420) (undo-tree-id2712 . -3) 423 (420 . 423) (412 . 420) (408 . 412) (405 . 408) (402 . 405) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -402) (undo-tree-id2713 . -1) 403 (398 . 403) (#("longenst" 0 8 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -398) (undo-tree-id2714 . -8) 406 (398 . 406) (394 . 398) (389 . 394) (386 . 389) (376 . 386) (370 . 376) (369 . 370) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -369) (undo-tree-id2715 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -370) (undo-tree-id2716 . -1) 371 (367 . 371) (362 . 367) (t 25335 49239 537727 340000)) nil (25335 49284 574230 246000) 0 nil])
([nil nil ((618 . 622) (608 . 618) (603 . 608) (598 . 603) (594 . 598) (589 . 594) (570 . 577) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 570) (569 . 570) (570 . 582) (#("opcode/" 0 7 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -570) (undo-tree-id2864 . -7) 577 (#("operand" 0 7 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -577) (undo-tree-id2865 . -7) 584 (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -584) (undo-tree-id2866 . -1) (#("i" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -585) (undo-tree-id2867 . -1) (#("d" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -586) (undo-tree-id2868 . -1) 587 (570 . 587) (#("grap" 0 4 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -570) (undo-tree-id2869 . -4) 574 (570 . 574) (566 . 570) (559 . 566) (#("m" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -559) (undo-tree-id2870 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -560) (undo-tree-id2871 . -1) 561 (559 . 561) (556 . 559) (#("m" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -556) (undo-tree-id2872 . -1) (#("y" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -557) (undo-tree-id2873 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -558) (undo-tree-id2874 . -1) 559 (556 . 559) (551 . 556) (543 . 551) (535 . 543) (529 . 535) (526 . 529) (521 . 526) (518 . 521) (513 . 518) (509 . 513) (508 . 509) (502 . 508) (494 . 502) (493 . 494) (1135 . 1143) (1132 . 1135) (1131 . 1132) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -1131) (undo-tree-id2875 . -1) 1132 (1128 . 1132) (1125 . 1128) (1120 . 1125) (t 25335 49284 603312 734000)) nil (25335 49426 365394 855000) 0 nil])
([nil nil ((#("    // TODO: this will be slow on large graphs. Improve this by saving the
    // instruction info ina temp data structure and 
" 0 4 (fontified t ws-butler-chg chg) 4 7 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face) 7 12 (fontified t ws-butler-chg chg face (warning bold font-lock-comment-face)) 12 75 (fontified t ws-butler-chg chg face font-lock-comment-face) 75 79 (fontified t ws-butler-chg chg) 79 82 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face) 82 83 (fontified t ws-butler-chg delete face font-lock-comment-face) 83 127 (fontified t ws-butler-chg chg face font-lock-comment-face) 127 128 (fontified t ws-butler-chg delete face font-lock-comment-face)) . 495) (undo-tree-id2797 . -126) (undo-tree-id2798 . 1) (undo-tree-id2799 . -126) (undo-tree-id2800 . -51) (undo-tree-id2801 . -51) (undo-tree-id2802 . -127) (undo-tree-id2803 . -126) (undo-tree-id2804 . -127) (undo-tree-id2805 . -127) (undo-tree-id2806 . -127) (undo-tree-id2807 . -127) (undo-tree-id2808 . -127) (undo-tree-id2809 . -127) (undo-tree-id2810 . -127) (undo-tree-id2811 . -127) (undo-tree-id2812 . -127) (undo-tree-id2813 . -127) (undo-tree-id2814 . -127) (undo-tree-id2815 . -127) (undo-tree-id2816 . -127) (undo-tree-id2817 . -127) (undo-tree-id2818 . -127) (undo-tree-id2819 . -126) (undo-tree-id2820 . -126) (undo-tree-id2821 . -126) (undo-tree-id2822 . -126) (undo-tree-id2823 . -126) (undo-tree-id2824 . -126) (undo-tree-id2825 . -126) (undo-tree-id2826 . -126) (undo-tree-id2827 . -126) (undo-tree-id2828 . -126) (undo-tree-id2829 . -126) (undo-tree-id2830 . -126) (undo-tree-id2831 . -126) (undo-tree-id2832 . -126) (undo-tree-id2833 . -126) (undo-tree-id2834 . -126) (undo-tree-id2835 . -126) (undo-tree-id2836 . -128) (undo-tree-id2837 . -126) (undo-tree-id2838 . -126) (undo-tree-id2839 . -51) (undo-tree-id2840 . -126) (undo-tree-id2841 . -126) (undo-tree-id2842 . -126) (undo-tree-id2843 . -126) (undo-tree-id2844 . -126) (undo-tree-id2845 . -126) (undo-tree-id2846 . -126) (undo-tree-id2847 . -126) (undo-tree-id2848 . -126) (undo-tree-id2849 . -126) (undo-tree-id2850 . -126) (undo-tree-id2851 . -51) (undo-tree-id2852 . -126) (undo-tree-id2853 . -51) (undo-tree-id2854 . -51) (undo-tree-id2855 . -51) (undo-tree-id2856 . -51) (undo-tree-id2857 . -51) (undo-tree-id2858 . -51) (undo-tree-id2859 . -51) (undo-tree-id2860 . -51) (undo-tree-id2861 . -51) (undo-tree-id2862 . -51) (undo-tree-id2863 . -51) 546) nil (25335 49426 365387 782000) 0 nil])
([nil nil ((658 . 662) (653 . 658) (646 . 653) (645 . 646) (641 . 645) (635 . 641) (629 . 635) (627 . 629) (626 . 627) (621 . 625) (614 . 621) (#("ope" 0 3 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -614) (undo-tree-id2717 . -3) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -2) (undo-tree-id2730 . -1) (undo-tree-id2731 . -2) (undo-tree-id2732 . -2) (undo-tree-id2733 . -2) (undo-tree-id2734 . -2) (undo-tree-id2735 . -2) (undo-tree-id2736 . -2) (undo-tree-id2737 . -2) (undo-tree-id2738 . -2) (undo-tree-id2739 . -2) (undo-tree-id2740 . -2) (undo-tree-id2741 . -3) (undo-tree-id2742 . -2) (undo-tree-id2743 . -3) (undo-tree-id2744 . -3) (undo-tree-id2745 . -3) (undo-tree-id2746 . -3) (undo-tree-id2747 . -3) (undo-tree-id2748 . -3) (undo-tree-id2749 . -3) (undo-tree-id2750 . -3) (undo-tree-id2751 . -3) (undo-tree-id2752 . -3) (undo-tree-id2753 . -3) (undo-tree-id2754 . -3) (undo-tree-id2755 . -3) (undo-tree-id2756 . -3) (undo-tree-id2757 . -3) (undo-tree-id2758 . -3) (undo-tree-id2759 . -3) (undo-tree-id2760 . -3) (undo-tree-id2761 . -3) (undo-tree-id2762 . -3) (undo-tree-id2763 . -3) (undo-tree-id2764 . -3) (undo-tree-id2765 . -3) (undo-tree-id2766 . -3) (undo-tree-id2767 . -3) (undo-tree-id2768 . -3) (undo-tree-id2769 . -3) (undo-tree-id2770 . -3) (undo-tree-id2771 . -3) (undo-tree-id2772 . -3) (undo-tree-id2773 . -3) (undo-tree-id2774 . -3) (undo-tree-id2775 . -3) (undo-tree-id2776 . -3) (undo-tree-id2777 . -3) (undo-tree-id2778 . -3) (undo-tree-id2779 . -3) (undo-tree-id2780 . -3) (undo-tree-id2781 . -3) (undo-tree-id2782 . -3) (undo-tree-id2783 . -3) 617 (614 . 617) (613 . 615) (#("`" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . -613) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (613 . 614) (609 . 613) (589 . 596) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 589) (588 . 589) (601 . 602) (596 . 600) (590 . 596) (#("op" 0 2 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -590) (undo-tree-id2786 . -2) 592 (590 . 592) (589 . 591) (#("`" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . -589) (589 . 590) (584 . 589) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -584) (undo-tree-id2787 . -1) 585 (584 . 585) (579 . 584) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . -579) (undo-tree-id2788 . -1) (573 . 580) (568 . 573) (565 . 568) (#("just" 0 4 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -565) (undo-tree-id2789 . -4) 569 (565 . 569) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . -565) (undo-tree-id2790 . -1) (562 . 566) (556 . 562) (553 . 556) (548 . 553) (543 . 548) (538 . 543) (533 . 538) (519 . 526) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 519) (518 . 519) (519 . 526) (516 . 519) (510 . 516) (508 . 510) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -508) (undo-tree-id2791 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -509) (undo-tree-id2792 . -1) 510 (508 . 510) (505 . 508) (500 . 505) (498 . 500) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -498) (undo-tree-id2793 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -499) (undo-tree-id2794 . -1) (#("h" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -500) (undo-tree-id2795 . -1) 501 (499 . 501) (495 . 499) (#("This " 0 5 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -495) (undo-tree-id2796 . -5) 500 (495 . 500) (494 . 495)) nil (25335 49426 365358 766000) 0 nil])
([nil nil ((#(" " 0 1 (ws-butler-chg chg fontified t face font-lock-comment-face)) . 1311) 661) nil (25335 49426 365197 428000) 0 nil])
([nil nil ((1353 . 1358) (1347 . 1353) (1343 . 1347) (1337 . 1343) (1332 . 1337) (1329 . 1332) (1317 . 1329) (1312 . 1317) (1311 . 1312) (t 25335 49427 280322 916000)) nil (25335 49454 210401 690000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-comment-face)) . 3178) (t 25335 49454 301270 417000)) nil (25335 50152 319278 337000) 0 nil])
([nil nil ((396 . 400) (391 . 396) (389 . 391) (386 . 389) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -386) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . -387) (undo-tree-id2895 . -1) 388 (387 . 388) (386 . 387) (t 25335 50152 353659 787000)) nil (25335 50173 56130 394000) 0 nil])
([nil nil ((588 . 589) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil ws-butler-chg chg)) . 588) (#("
" 0 1 (fontified nil face font-lock-comment-face ws-butler-chg chg)) . -588) (undo-tree-id2892 . -1) (525 . 526) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil ws-butler-chg chg)) . 525) (#("
" 0 1 (fontified nil face font-lock-comment-face ws-butler-chg chg)) . -525) (453 . 454) (#("    " 0 1 (fontified nil ws-butler-chg delete) 1 4 (fontified nil ws-butler-chg chg)) . 453) (#("
" 0 1 (fontified t face font-lock-comment-face)) . -453) (apply 9 454 667 undo--wrap-and-run-primitive-undo 454 667 ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -601) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -534) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . -458) 639))) nil (25335 50173 56127 609000) 0 nil])
([nil nil ((603 . 610) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 603) (602 . 603) (522 . 529) (#(" " 0 1 (fontified nil ws-butler-chg chg face font-lock-comment-face)) . 522) (521 . 522) (441 . 448) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 441) (440 . 441) (655 . 656)) nil (25335 50173 56125 565000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-comment-face)) . 676) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1)) nil (25335 50173 56121 778000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1296) (t 25335 50173 86382 533000)) nil (25335 50210 789055 881000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 34) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-4-face))) . 1183) (undo-tree-id3012 . -1) (1182 . 1183) (apply deactivate-cursor-after-undo 34) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1130) (undo-tree-id3013 . 1) (undo-tree-id3014 . -1) (1129 . 1130) (apply activate-cursor-for-undo 34) (1181 . 1183) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1181) (1181 . 1182) (apply deactivate-cursor-after-undo 34) (1128 . 1130) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1128) (1128 . 1129) (apply activate-cursor-for-undo 34) (1178 . 1179) (apply deactivate-cursor-after-undo 34) (1127 . 1128) (apply activate-cursor-for-undo 34) (1176 . 1177) (apply deactivate-cursor-after-undo 34) (1126 . 1127) (apply activate-cursor-for-undo 34) (1174 . 1175) (apply deactivate-cursor-after-undo 34) (1125 . 1126) (apply activate-cursor-for-undo 34) (1172 . 1173) (apply deactivate-cursor-after-undo 34) (1124 . 1125) (apply activate-cursor-for-undo 34) (1170 . 1171) (apply deactivate-cursor-after-undo 34) (1123 . 1124) (apply activate-cursor-for-undo 34) (1168 . 1169) (apply deactivate-cursor-after-undo 34) (1122 . 1123) (apply activate-cursor-for-undo 34) (1166 . 1167) (apply deactivate-cursor-after-undo 34) (1121 . 1122) (apply activate-cursor-for-undo 34) (1164 . 1165) (apply deactivate-cursor-after-undo 34) (1120 . 1121) (apply activate-cursor-for-undo 34) (1162 . 1163) (apply deactivate-cursor-after-undo 34) (1119 . 1120) (apply activate-cursor-for-undo 34) (1160 . 1161) (#("cur_opcode_len" 0 14 (fontified t)) . -1160) (apply deactivate-cursor-after-undo 34) (1118 . 1119) (#("cur_opcode_len" 0 14 (fontified t)) . -1118) (undo-tree-id3015 . -14) (undo-tree-id3016 . -14) 1132) nil (25335 50210 789053 447000) 0 nil])
([nil nil ((apply activate-cursor-for-undo 36) (#("_" 0 1 (fontified t)) . -1264) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (apply deactivate-cursor-after-undo 36) (#("_" 0 1 (fontified t)) . -1214) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) 1215 (apply activate-cursor-for-undo 36) (#("len" 0 3 (fontified t)) . -1266) (undo-tree-id2930 . -3) (undo-tree-id2931 . -3) (undo-tree-id2932 . -3) (apply deactivate-cursor-after-undo 36) (#("len" 0 3 (fontified t)) . -1215) (undo-tree-id2933 . -3) (undo-tree-id2934 . -3) (undo-tree-id2935 . -3) (undo-tree-id2936 . -3) (undo-tree-id2937 . -3) (undo-tree-id2938 . -3) (undo-tree-id2939 . -3) (undo-tree-id2940 . -3) (undo-tree-id2941 . -3) (undo-tree-id2942 . -3) (undo-tree-id2943 . -3) (undo-tree-id2944 . -3) (undo-tree-id2945 . -3) (undo-tree-id2946 . -3) (undo-tree-id2947 . -3) 1218 (apply activate-cursor-for-undo 36) (#("cur_" 0 4 (fontified t)) . -1261) (undo-tree-id2948 . -1) (undo-tree-id2949 . -2) (undo-tree-id2950 . -3) (undo-tree-id2951 . -4) (undo-tree-id2952 . -4) (apply deactivate-cursor-after-undo 36) (#("cur_" 0 4 (fontified t)) . -1207) (undo-tree-id2953 . -4) (undo-tree-id2954 . -4) (undo-tree-id2955 . -4) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -2) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -2) (undo-tree-id2976 . -2) (undo-tree-id2977 . -2) (undo-tree-id2978 . -2) (undo-tree-id2979 . -2) (undo-tree-id2980 . -2) (undo-tree-id2981 . -2) (undo-tree-id2982 . -2) (undo-tree-id2983 . -2) (undo-tree-id2984 . -2) (undo-tree-id2985 . -3) (undo-tree-id2986 . -2) (undo-tree-id2987 . -2) (undo-tree-id2988 . -3) (undo-tree-id2989 . -3) (undo-tree-id2990 . -3) (undo-tree-id2991 . -3) (undo-tree-id2992 . -3) (undo-tree-id2993 . -3) (undo-tree-id2994 . -3) (undo-tree-id2995 . -3) (undo-tree-id2996 . -3) (undo-tree-id2997 . -3) (undo-tree-id2998 . -4) (undo-tree-id2999 . -3) (undo-tree-id3000 . -3) (undo-tree-id3001 . -4) (undo-tree-id3002 . -4) (undo-tree-id3003 . -4) (undo-tree-id3004 . -4) (undo-tree-id3005 . -4) (undo-tree-id3006 . -4) (undo-tree-id3007 . -4) (undo-tree-id3008 . -4) (undo-tree-id3009 . -4) (undo-tree-id3010 . -4) (undo-tree-id3011 . -4) 1211) nil (25335 50210 789042 85000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil ws-butler-chg chg)) . 1276) (undo-tree-id3017 . -1) (1275 . 1276) (1274 . 1276) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1274) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (1270 . 1275) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-3-face))) . 1220) (1219 . 1220) (1218 . 1220) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -1218) (1214 . 1219) (t 25335 50210 819697 805000)) nil (25335 50221 200613 806000) 0 nil])
([nil nil ((#("
        let cur_opcode_len  = opcode.len();
        let cur_operand_len = operand.len();
" 0 1 (fontified t) 1 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 27 (fontified t face font-lock-variable-name-face) 27 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t) 31 38 (fontified t) 38 39 (fontified t) 39 41 (fontified t) 41 42 (fontified t face (rainbow-delimiters-depth-3-face)) 42 43 (fontified t face (rainbow-delimiters-depth-3-face)) 43 44 (fontified t) 44 45 (fontified t) 45 52 (fontified t) 52 53 (rear-nonsticky t fontified t) 53 56 (fontified t face font-lock-keyword-face) 56 57 (fontified t) 57 68 (fontified t face font-lock-variable-name-face) 68 69 (fontified t face font-lock-variable-name-face) 69 72 (fontified t face font-lock-variable-name-face) 72 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 86 (fontified t) 86 87 (fontified t face (rainbow-delimiters-depth-3-face)) 87 88 (fontified t face (rainbow-delimiters-depth-3-face)) 88 89 (fontified t) 89 90 (fontified t)) . 1016) (undo-tree-id3020 . -45) (undo-tree-id3021 . -45) (undo-tree-id3022 . -45) (undo-tree-id3023 . -45) 1061 (t 25335 50221 244061 121000)) nil (25335 50224 853079 100000) 0 nil])
([nil nil ((39 . 44) (#("a" 0 1 (fontified t ws-butler-chg chg face font-lock-constant-face)) . -39) (undo-tree-id3091 . -1) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -40) (undo-tree-id3092 . -1) 41 (38 . 41) (34 . 38) (33 . 34) (t 25335 50225 452207 785000) 1) nil (25335 53032 531555 274000) 0 nil])
([nil nil ((49 . 51) (#(";" 0 1 (fontified t ws-butler-chg chg)) . -49) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (#("
" 0 1 (fontified t ws-butler-chg chg)) . -50) (undo-tree-id3071 . -1) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -1) 51 (50 . 51) (49 . 50) (44 . 49)) nil (25335 53032 531550 54000) 0 nil])
([nil nil ((3475 . 3480) (3473 . 3475) (3471 . 3473) (#(" " 0 1 (fontified t ws-butler-chg chg)) . -3471) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) 3472 (3465 . 3472) (#("9" 0 1 (fontified t ws-butler-chg chg)) . -3465) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (#("o" 0 1 (fontified t ws-butler-chg chg)) . -3466) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) 3467 (3464 . 3467) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -3464) (undo-tree-id3196 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face)) . -3465) (undo-tree-id3197 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3466) (undo-tree-id3198 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3467) (undo-tree-id3199 . -1) 3468 (3459 . 3468) (3455 . 3459) (3454 . 3455) (3450 . 3454) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-doc-face)) . -3450) (undo-tree-id3200 . -1) (3449 . 3451) (#("n" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3449) (undo-tree-id3201 . -1) (#("." 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3450) (undo-tree-id3202 . -1) 3451 (3446 . 3451) (#("I" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3446) (undo-tree-id3203 . -1) 3447 (3446 . 3447) (3442 . 3446) (3439 . 3442) (3434 . 3439) (#("Ion " 0 4 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3434) (undo-tree-id3204 . -4) 3438 (3434 . 3438) (3433 . 3434) (3430 . 3433) (3425 . 3430) (3425 . 3430) (3497 . 3502) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3475) (undo-tree-id3205 . -1) 3476 (3469 . 3476) (3465 . 3469) (3460 . 3465) (3457 . 3460) (3451 . 3457) (3446 . 3451) (3442 . 3446) (3439 . 3442) (3434 . 3439) (#("Name " 0 5 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3434) (undo-tree-id3206 . -5) 3439 (#("of " 0 3 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3439) (undo-tree-id3207 . -3) 3442 (#("the " 0 4 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3442) (undo-tree-id3208 . -4) 3446 (#("file " 0 5 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3446) (undo-tree-id3209 . -5) 3451 (3446 . 3451) (3442 . 3446) (3439 . 3442) (3436 . 3439) (3434 . 3436) (3430 . 3434) (3425 . 3430) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 3425) (undo-tree-id3210 . -4) 3429 (3425 . 3429) (3425 . 3430) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 3425) (undo-tree-id3211 . -4) 3429 (3446 . 3451) (3439 . 3446) (3429 . 3439) (3425 . 3429) (3424 . 3426) (3423 . 3425) (#("{" 0 1 (fontified nil ws-butler-chg chg)) . -3423) (3423 . 3424) (3418 . 3423) (3411 . 3418) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -3411) (undo-tree-id3212 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face)) . -3412) (undo-tree-id3213 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3413) (undo-tree-id3214 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3414) (undo-tree-id3215 . -1) 3415 (3410 . 3415) (3405 . 3410) (3401 . 3405) (3394 . 3401) (3393 . 3394) (#("Simple " 0 7 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3393) (undo-tree-id3216 . -7) 3400 (3393 . 3400) (3390 . 3393) (3389 . 3390) (3388 . 3389) (t 25335 53032 557800 689000)) nil (25335 53114 129248 763000) 0 nil])
([nil nil ((#("    " 0 4 (ws-butler-chg chg fontified t)) . 3555) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 3554) (#("    " 0 4 (ws-butler-chg chg fontified t)) . 3481) 3479) nil (25335 53114 129184 771000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3581 . 3582) (nil fontified nil 3555 . 3582) (3555 . 3582) (t 25335 53114 172876 913000)) nil (25335 53276 298783 517000) 0 nil])
([nil nil ((3578 . 3579) (#("5" 0 1 (ws-butler-chg chg fontified t face highlight-numbers-number)) . -3578) (undo-tree-id3226 . -1) 3579) nil (25335 53276 298782 465000) 0 nil])
([nil nil ((#("(setq lsp-idle-delay 0.900)
" 0 1 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face)) 1 21 (ws-butler-chg chg fontified t) 21 24 (ws-butler-chg chg fontified t face highlight-numbers-number) 24 25 (ws-butler-chg delete fontified t face highlight-numbers-number) 25 26 (ws-butler-chg chg fontified t face highlight-numbers-number) 26 27 (ws-butler-chg chg fontified t rear-nonsticky t face (rainbow-delimiters-depth-2-face)) 27 28 (fontified t)) . 3555) (undo-tree-id3217 . 1) (undo-tree-id3218 . -26) (undo-tree-id3219 . -26) (undo-tree-id3220 . -28) (undo-tree-id3221 . -26) (undo-tree-id3222 . 2) (undo-tree-id3223 . -27) (undo-tree-id3224 . 28) (undo-tree-id3225 . -1) 3581) nil (25335 53276 298778 687000) 0 nil])
([nil nil ((3466 . 3472) (3465 . 3467) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -3465) (3465 . 3466) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -3465) (undo-tree-id3246 . -1) 3466 (3464 . 3466) (3460 . 3464) (3460 . 3461) (t 25335 53276 326935 525000)) nil (25335 53485 473340 431000) 0 nil])
([nil nil ((3419 . 3421) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3419) (3413 . 3420) (3412 . 3414) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -3412) (3411 . 3413) (3411 . 3412) (3481 . 3486) (3473 . 3481) (3472 . 3474) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3472) (3472 . 3473)) nil (25335 53485 473338 27000) 0 nil])
([nil nil ((#("#[derive()]
" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 1 2 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 2 8 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 8 9 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 9 10 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 10 11 (fontified t ws-butler-chg delete face (rainbow-delimiters-depth-1-face font-lock-preprocessor-face)) 11 12 (fontified t ws-butler-chg delete)) . 3411) (undo-tree-id3239 . 3) (undo-tree-id3240 . -12) (undo-tree-id3241 . -8) (undo-tree-id3242 . 4) (undo-tree-id3243 . -9) (undo-tree-id3244 . 3) (undo-tree-id3245 . -10) 3419) nil (25335 53485 473336 93000) 0 nil])
([nil nil ((3426 . 3455) (#("
" 0 1 (fontified t face font-lock-doc-face)) . -3459) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (#("    #[derive(Parser, Debug)]" 0 4 (ws-butler-chg chg fontified t) 4 5 (ws-butler-chg chg fontified t face font-lock-preprocessor-face) 5 6 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 6 12 (ws-butler-chg chg fontified t face font-lock-preprocessor-face) 12 13 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 13 26 (ws-butler-chg chg fontified t face font-lock-preprocessor-face) 26 27 (ws-butler-chg chg fontified t face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 27 28 (ws-butler-chg delete fontified t face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face))) . 3460) (undo-tree-id3237 . -8) (undo-tree-id3238 . -4) 3468) nil (25335 53485 473331 735000) 0 nil])
([nil nil ((3425 . 3454) (#("
" 0 1 (fontified t)) . -3425) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (#("    #[derive(Parser, Debug)]" 0 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 5 6 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 6 12 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 12 13 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 13 26 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 26 27 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 27 28 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face))) . 3426) (undo-tree-id3232 . -8) 3434) nil (25335 53485 473327 967000) 0 nil])
([nil nil ((3411 . 3440) (#("
" 0 1 (fontified t)) . -3424) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (#("    #[derive(Parser, Debug)]" 0 4 (fontified t ws-butler-chg chg) 4 5 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 5 6 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face)) 6 12 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 12 13 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 13 26 (fontified t ws-butler-chg chg face font-lock-preprocessor-face) 26 27 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-3-face font-lock-preprocessor-face)) 27 28 (fontified t ws-butler-chg chg face (rainbow-delimiters-depth-2-face font-lock-preprocessor-face))) . 3425) (undo-tree-id3229 . -8) 3433) nil (25335 53485 473322 467000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t ws-butler-chg chg)) . -3411) 3419) nil (25335 53485 473311 917000) 0 nil])
([nil nil ((3480 . 3482) (3476 . 3480) (#("=" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -3476) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) 3477 (3476 . 3477) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -3476) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (undo-tree-id3308 . -1) (undo-tree-id3309 . -1) (undo-tree-id3310 . -1) (undo-tree-id3311 . -1) (#("-" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -3477) (undo-tree-id3312 . -1) (undo-tree-id3313 . -1) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (undo-tree-id3318 . -1) (undo-tree-id3319 . -1) (undo-tree-id3320 . -1) (undo-tree-id3321 . -1) (undo-tree-id3322 . -1) (undo-tree-id3323 . -1) (undo-tree-id3324 . -1) (undo-tree-id3325 . -1) (undo-tree-id3326 . -1) (undo-tree-id3327 . -1) (undo-tree-id3328 . -1) (undo-tree-id3329 . -1) (undo-tree-id3330 . -1) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) 3478 (3469 . 3478) (3467 . 3469) (3460 . 3467) (3451 . 3460) (3446 . 3451) (#("o" 0 1 (fontified t ws-butler-chg chg face font-lock-preprocessor-face)) . -3446) (undo-tree-id3335 . -1) 3447 (3443 . 3447) (3442 . 3444) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3442) (3438 . 3443) (3437 . 3439) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -3437) (3436 . 3438) (3435 . 3436) (t 25335 53485 502672 180000) 3419) nil (25335 53507 979109 995000) 0 nil])
([nil nil ((3558 . 3570) (3552 . 3558) (3550 . 3552) (3545 . 3550) (3544 . 3546) (#("(" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3544) (3540 . 3545) (3539 . 3541) (#("[" 0 1 (fontified nil ws-butler-chg chg)) . -3539) (3538 . 3540) (#("/" 0 1 (fontified t ws-butler-chg chg)) . -3538) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-comment-delimiter-face)) . -3539) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (#("/" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3540) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3541) (undo-tree-id3342 . -1) (undo-tree-id3343 . -1) 3542 (3533 . 3542) (t 25335 53508 7500 481000) 3532) nil (25335 53573 153629 276000) 0 nil])
([nil nil ((3644 . 3653) (t 25335 53573 189896 20000) 3630) nil (25335 53822 876958 857000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3657 . 3658) (#("
" 0 1 (fontified nil ws-butler-chg chg)) . -3692) (3653 . 3693) 3652) nil (25335 53822 876958 256000) 0 nil])
([nil nil ((#("    /// 
" 0 4 (fontified t ws-butler-chg chg) 4 8 (fontified t ws-butler-chg chg face font-lock-doc-face) 8 9 (fontified t ws-butler-chg chg face font-lock-doc-face)) . 3645) (undo-tree-id3348 . -9) (undo-tree-id3349 . -9) (undo-tree-id3350 . -4) 3649) nil (25335 53822 876957 414000) 0 nil])
([nil nil ((3751 . 3752) (#(")" 0 1 (fontified nil ws-butler-chg chg face (rainbow-delimiters-depth-2-face))) . 3751) (undo-tree-id3344 . -1) (3750 . 3751) (3749 . 3751) (#("(" 0 1 (fontified nil ws-butler-chg chg)) . -3749) (undo-tree-id3345 . -1) (undo-tree-id3346 . -1) (3738 . 3750) (3736 . 3738) (3731 . 3736) (3727 . 3731) (3722 . 3727) (#("    " 0 4 (fontified t ws-butler-chg chg)) . 3722) (undo-tree-id3347 . -4) 3726 (3721 . 3726) 3720) nil (25335 53822 876952 375000) 0 nil])
([nil nil ((3458 . 3462) (3455 . 3458) (3453 . 3455) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3453) (undo-tree-id3351 . -1) 3454 (3449 . 3454) (3446 . 3449) (#("s" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3446) (undo-tree-id3352 . -1) 3447 (3444 . 3447) (3442 . 3444) (3437 . 3442) (3432 . 3437) (3427 . 3432) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-doc-face)) . -3427) (undo-tree-id3353 . -1) (3426 . 3428) (3423 . 3426) (3419 . 3423) (#("h" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3419) (undo-tree-id3354 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3420) (undo-tree-id3355 . -1) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3421) (undo-tree-id3356 . -1) 3422 (3419 . 3422) (3417 . 3419) (#(" " 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3417) (undo-tree-id3357 . -1) (#("t" 0 1 (fontified t ws-butler-chg chg face font-lock-doc-face)) . -3418) (undo-tree-id3358 . -1) 3419 (3418 . 3419) (3411 . 3418) (3408 . 3411) (3401 . 3408) (#("and " 0 4 (fontified t face font-lock-doc-face)) . -3401) (undo-tree-id3359 . -4) (undo-tree-id3360 . -4) (undo-tree-id3361 . -4) 3405 (#("basic" 0 5 (fontified t face font-lock-doc-face)) . -3405) (undo-tree-id3362 . -5) 3410 (t 25335 53822 919032 957000)) nil (25335 53889 871186 495000) 0 nil])
([nil nil ((#("version, " 0 9 (fontified t face font-lock-preprocessor-face)) . -3517) (undo-tree-id3363 . -9) 3526 (3511 . 3515) (3510 . 3511) (#("j" 0 1 (fontified t ws-butler-chg chg face font-lock-string-face)) . -3510) (undo-tree-id3364 . -1) 3511 (3510 . 3511) (#("j" 0 1 (fontified nil ws-butler-chg chg face font-lock-string-face)) . -3510) (undo-tree-id3365 . -1) (3501 . 3511) (t 25335 53889 901475 149000)) nil (25335 54024 774332 882000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t face font-lock-preprocessor-face)) . -3501) (undo-tree-id3366 . -1) (undo-tree-id3367 . -1) (undo-tree-id3368 . -1) (undo-tree-id3369 . -1) (undo-tree-id3370 . -1) (undo-tree-id3371 . -1) (undo-tree-id3372 . -1) (undo-tree-id3373 . -1) (undo-tree-id3374 . -1) (undo-tree-id3375 . -1) (undo-tree-id3376 . -1) (undo-tree-id3377 . -1) (undo-tree-id3378 . -1) (undo-tree-id3379 . -1) (undo-tree-id3380 . -1) (undo-tree-id3381 . -1) (undo-tree-id3382 . -1) (undo-tree-id3383 . -1) (undo-tree-id3384 . -1) (undo-tree-id3385 . -1) (undo-tree-id3386 . -1) (undo-tree-id3387 . -1) (undo-tree-id3388 . -1) (undo-tree-id3389 . -1) (undo-tree-id3390 . -1) (undo-tree-id3391 . -1) (undo-tree-id3392 . -1) (undo-tree-id3393 . -1) (undo-tree-id3394 . -1) (undo-tree-id3395 . -1) (undo-tree-id3396 . -1) (undo-tree-id3397 . -1) (undo-tree-id3398 . -1) (undo-tree-id3399 . -1) (undo-tree-id3400 . -1) (undo-tree-id3401 . -1) (undo-tree-id3402 . -1) (undo-tree-id3403 . -1) (undo-tree-id3404 . -1) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3408 . -1) (undo-tree-id3409 . -1) (undo-tree-id3410 . -1) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -1) (undo-tree-id3427 . -1) (undo-tree-id3428 . -1) (undo-tree-id3429 . -1) (undo-tree-id3430 . -1) (undo-tree-id3431 . -1) (undo-tree-id3432 . -1) (undo-tree-id3433 . -1) (undo-tree-id3434 . -1) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -3502) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -1) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) 3503 (#("Vignesh " 0 8 (fontified t face font-lock-string-face)) . -3503) (undo-tree-id3492 . -8) (undo-tree-id3493 . -8) (undo-tree-id3494 . -8) (undo-tree-id3495 . -8) (undo-tree-id3496 . -8) (undo-tree-id3497 . -8) (undo-tree-id3498 . -8) (undo-tree-id3499 . -8) (undo-tree-id3500 . -8) (undo-tree-id3501 . -8) (undo-tree-id3502 . -8) (undo-tree-id3503 . -8) (undo-tree-id3504 . -8) (undo-tree-id3505 . -8) (undo-tree-id3506 . -8) (undo-tree-id3507 . -8) (undo-tree-id3508 . -8) (undo-tree-id3509 . -8) (undo-tree-id3510 . -8) (undo-tree-id3511 . -8) (undo-tree-id3512 . -8) (undo-tree-id3513 . -8) (undo-tree-id3514 . -8) (undo-tree-id3515 . -8) (undo-tree-id3516 . -8) (undo-tree-id3517 . -8) (undo-tree-id3518 . -8) (undo-tree-id3519 . -8) (undo-tree-id3520 . -8) (undo-tree-id3521 . -8) (undo-tree-id3522 . -8) (undo-tree-id3523 . -8) (undo-tree-id3524 . -8) (undo-tree-id3525 . -8) (undo-tree-id3526 . -8) (undo-tree-id3527 . -8) (undo-tree-id3528 . -8) (undo-tree-id3529 . -8) (undo-tree-id3530 . -8) (undo-tree-id3531 . -8) 3511 (#("Rao\"" 0 4 (fontified t face font-lock-string-face)) . -3511) (undo-tree-id3532 . -4) (undo-tree-id3533 . -4) (undo-tree-id3534 . -4) (undo-tree-id3535 . -4) (undo-tree-id3536 . -4) (undo-tree-id3537 . -4) (undo-tree-id3538 . -4) (undo-tree-id3539 . -4) (undo-tree-id3540 . -4) (undo-tree-id3541 . -4) (undo-tree-id3542 . -4) (undo-tree-id3543 . -4) (undo-tree-id3544 . -4) 3515 (t 25335 54025 170398 848000)) nil (25335 54041 344969 601000) 0 nil])
([nil nil ((3745 . 3758) (#("/tmp/ion" 0 8 (fontified t ws-butler-chg chg face font-lock-string-face)) . -3745) (undo-tree-id3545 . -8) (undo-tree-id3546 . -8) (undo-tree-id3547 . -7) (undo-tree-id3548 . -8) (undo-tree-id3549 . -8) (undo-tree-id3550 . -8) (undo-tree-id3551 . -8) (undo-tree-id3552 . -8) (undo-tree-id3553 . -8) (undo-tree-id3554 . -8) (undo-tree-id3555 . -8) (undo-tree-id3556 . -8) (undo-tree-id3557 . -8) (undo-tree-id3558 . -8) (undo-tree-id3559 . -8) (undo-tree-id3560 . -8) (undo-tree-id3561 . -8) (undo-tree-id3562 . -8) (undo-tree-id3563 . -8) (undo-tree-id3564 . -8) (undo-tree-id3565 . -8) (undo-tree-id3566 . -8) (undo-tree-id3567 . -8) (undo-tree-id3568 . -8) (undo-tree-id3569 . -8) (undo-tree-id3570 . -8) (undo-tree-id3571 . -8) (undo-tree-id3572 . -8) (undo-tree-id3573 . -8) (undo-tree-id3574 . -8) (undo-tree-id3575 . -8) 3753 (3750 . 3753) (3745 . 3750) (3744 . 3746) (#("\"" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3744) (3744 . 3745) (3742 . 3744) (3726 . 3742) (3724 . 3726) (t 25335 54041 382988 342000)) nil (25335 54114 752823 491000) 0 nil])
([nil nil ((3634 . 3647) (#("/tmp/ion." 0 9 (fontified t ws-butler-chg chg face font-lock-string-face)) . -3634) (undo-tree-id3576 . -9) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -2) (undo-tree-id3599 . -1) (undo-tree-id3600 . -2) (undo-tree-id3601 . -2) (undo-tree-id3602 . -2) (undo-tree-id3603 . -2) (undo-tree-id3604 . -2) (undo-tree-id3605 . -2) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2) (undo-tree-id3608 . -2) (undo-tree-id3609 . -2) (undo-tree-id3610 . -3) (undo-tree-id3611 . -2) (undo-tree-id3612 . -3) (undo-tree-id3613 . -3) (undo-tree-id3614 . -3) (undo-tree-id3615 . -3) (undo-tree-id3616 . -3) (undo-tree-id3617 . -4) (undo-tree-id3618 . -3) (undo-tree-id3619 . -4) (undo-tree-id3620 . -4) (undo-tree-id3621 . -4) (undo-tree-id3622 . -4) (undo-tree-id3623 . -4) (undo-tree-id3624 . -4) (undo-tree-id3625 . -4) (undo-tree-id3626 . -4) (undo-tree-id3627 . -4) (undo-tree-id3628 . -4) (undo-tree-id3629 . -4) (undo-tree-id3630 . -4) (undo-tree-id3631 . -4) (undo-tree-id3632 . -4) (undo-tree-id3633 . -4) (undo-tree-id3634 . -4) (undo-tree-id3635 . -4) (undo-tree-id3636 . -4) (undo-tree-id3637 . -4) (undo-tree-id3638 . -4) (undo-tree-id3639 . -4) (undo-tree-id3640 . -4) (undo-tree-id3641 . -4) (undo-tree-id3642 . -4) (undo-tree-id3643 . -4) (undo-tree-id3644 . -4) (undo-tree-id3645 . -4) (undo-tree-id3646 . -4) (undo-tree-id3647 . -4) (undo-tree-id3648 . -4) (undo-tree-id3649 . -4) (undo-tree-id3650 . -4) (undo-tree-id3651 . -4) (undo-tree-id3652 . -4) (undo-tree-id3653 . -4) (undo-tree-id3654 . -5) (undo-tree-id3655 . -5) (undo-tree-id3656 . -5) (undo-tree-id3657 . -5) (undo-tree-id3658 . -5) (undo-tree-id3659 . -5) (undo-tree-id3660 . -4) (undo-tree-id3661 . -5) (undo-tree-id3662 . -5) (undo-tree-id3663 . -5) (undo-tree-id3664 . -5) (undo-tree-id3665 . -5) (undo-tree-id3666 . -5) (undo-tree-id3667 . -5) (undo-tree-id3668 . -5) (undo-tree-id3669 . -5) (undo-tree-id3670 . -5) (undo-tree-id3671 . -5) (undo-tree-id3672 . -5) (undo-tree-id3673 . -5) (undo-tree-id3674 . -5) (undo-tree-id3675 . -5) (undo-tree-id3676 . -6) (undo-tree-id3677 . -6) (undo-tree-id3678 . -6) (undo-tree-id3679 . -6) (undo-tree-id3680 . -6) (undo-tree-id3681 . -6) (undo-tree-id3682 . -5) (undo-tree-id3683 . -6) (undo-tree-id3684 . -6) (undo-tree-id3685 . -6) (undo-tree-id3686 . -6) (undo-tree-id3687 . -6) (undo-tree-id3688 . -6) (undo-tree-id3689 . -6) (undo-tree-id3690 . -6) (undo-tree-id3691 . -6) (undo-tree-id3692 . -6) (undo-tree-id3693 . -7) (undo-tree-id3694 . -7) (undo-tree-id3695 . -7) (undo-tree-id3696 . -7) (undo-tree-id3697 . -7) (undo-tree-id3698 . -7) (undo-tree-id3699 . -6) (undo-tree-id3700 . -7) (undo-tree-id3701 . -7) (undo-tree-id3702 . -7) (undo-tree-id3703 . -7) (undo-tree-id3704 . -7) (undo-tree-id3705 . -7) (undo-tree-id3706 . -7) (undo-tree-id3707 . -7) (undo-tree-id3708 . -7) (undo-tree-id3709 . -7) (undo-tree-id3710 . -7) (undo-tree-id3711 . -7) (undo-tree-id3712 . -7) (undo-tree-id3713 . -7) (undo-tree-id3714 . -7) (undo-tree-id3715 . -8) (undo-tree-id3716 . -8) (undo-tree-id3717 . -8) (undo-tree-id3718 . -8) (undo-tree-id3719 . -8) (undo-tree-id3720 . -8) (undo-tree-id3721 . -7) (undo-tree-id3722 . -8) (undo-tree-id3723 . -8) (undo-tree-id3724 . -8) (undo-tree-id3725 . -8) (undo-tree-id3726 . -8) (undo-tree-id3727 . -8) (undo-tree-id3728 . -8) (undo-tree-id3729 . -8) (undo-tree-id3730 . -8) (undo-tree-id3731 . -8) (undo-tree-id3732 . -8) (undo-tree-id3733 . -8) (undo-tree-id3734 . -8) (undo-tree-id3735 . -8) (undo-tree-id3736 . -8) (undo-tree-id3737 . -9) (undo-tree-id3738 . -9) (undo-tree-id3739 . -9) (undo-tree-id3740 . -9) (undo-tree-id3741 . -9) (undo-tree-id3742 . -9) (undo-tree-id3743 . -8) (undo-tree-id3744 . -9) (undo-tree-id3745 . -9) (undo-tree-id3746 . -9) (undo-tree-id3747 . -9) (undo-tree-id3748 . -9) (undo-tree-id3749 . -9) (undo-tree-id3750 . -9) (undo-tree-id3751 . -9) (undo-tree-id3752 . -9) (undo-tree-id3753 . -9) (undo-tree-id3754 . -9) (undo-tree-id3755 . -9) (undo-tree-id3756 . -9) (undo-tree-id3757 . -9) (undo-tree-id3758 . -9) (undo-tree-id3759 . -9) 3643 (3634 . 3643) (3633 . 3635) (#("\"" 0 1 (fontified nil ws-butler-chg chg face font-lock-preprocessor-face)) . -3633) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (3633 . 3634) (3631 . 3633) (3630 . 3631) (3615 . 3630) (3613 . 3615) (t 25335 54115 241672 373000)) nil (25335 54127 514180 273000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-preprocessor-face)) . 3628) (t 25335 54127 546119 300000)) nil (25335 54140 881234 798000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg delete face font-lock-preprocessor-face)) . 3628)) nil (25335 54140 881234 16000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-preprocessor-face)) . 3772)) nil (25335 54140 881232 884000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t ws-butler-chg delete face font-lock-preprocessor-face)) . 3772)) nil (25335 54140 881229 127000) 0 nil])
([nil nil ((154 . 162) (#("\"/tmp/ion.json\"" 0 1 (fontified t face font-lock-string-face) 1 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face)) . -154) (undo-tree-id3762 . -15) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (undo-tree-id3773 . -1) (undo-tree-id3774 . -5) (undo-tree-id3775 . -1) (undo-tree-id3776 . -5) (undo-tree-id3777 . -5) (undo-tree-id3778 . -5) (undo-tree-id3779 . -5) (undo-tree-id3780 . -5) (undo-tree-id3781 . -5) (undo-tree-id3782 . -5) (undo-tree-id3783 . -5) (undo-tree-id3784 . -5) (undo-tree-id3785 . -5) (undo-tree-id3786 . -5) (undo-tree-id3787 . -5) (undo-tree-id3788 . -5) (undo-tree-id3789 . -5) (undo-tree-id3790 . -5) (undo-tree-id3791 . -4) (undo-tree-id3792 . -5) (undo-tree-id3793 . -4) (undo-tree-id3794 . -4) (undo-tree-id3795 . -4) (undo-tree-id3796 . -4) (undo-tree-id3797 . -4) (undo-tree-id3798 . -4) (undo-tree-id3799 . -4) (undo-tree-id3800 . -4) (undo-tree-id3801 . -4) (undo-tree-id3802 . -4) (undo-tree-id3803 . -3) (undo-tree-id3804 . -4) (undo-tree-id3805 . -3) (undo-tree-id3806 . -3) (undo-tree-id3807 . -3) (undo-tree-id3808 . -3) (undo-tree-id3809 . -3) (undo-tree-id3810 . -3) (undo-tree-id3811 . -3) (undo-tree-id3812 . -3) (undo-tree-id3813 . -3) (undo-tree-id3814 . -3) (undo-tree-id3815 . -2) (undo-tree-id3816 . -3) (undo-tree-id3817 . -2) (undo-tree-id3818 . -2) (undo-tree-id3819 . -2) (undo-tree-id3820 . -2) (undo-tree-id3821 . -2) (undo-tree-id3822 . -2) (undo-tree-id3823 . -2) (undo-tree-id3824 . -2) (undo-tree-id3825 . -2) (undo-tree-id3826 . -2) (undo-tree-id3827 . -1) (undo-tree-id3828 . -2) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (undo-tree-id3840 . -1) (undo-tree-id3841 . -5) (undo-tree-id3842 . -15) (undo-tree-id3843 . -5) (undo-tree-id3844 . -5) (undo-tree-id3845 . -5) (undo-tree-id3846 . -5) (undo-tree-id3847 . -5) (undo-tree-id3848 . -5) (undo-tree-id3849 . -5) (undo-tree-id3850 . -5) (undo-tree-id3851 . -5) (undo-tree-id3852 . -5) (undo-tree-id3853 . -9) (undo-tree-id3854 . -5) (undo-tree-id3855 . -9) (undo-tree-id3856 . -9) (undo-tree-id3857 . -9) (undo-tree-id3858 . -9) (undo-tree-id3859 . -9) (undo-tree-id3860 . -9) (undo-tree-id3861 . -9) (undo-tree-id3862 . -9) (undo-tree-id3863 . -9) (undo-tree-id3864 . -9) (undo-tree-id3865 . -9) (undo-tree-id3866 . -9) (undo-tree-id3867 . -9) (undo-tree-id3868 . -9) (undo-tree-id3869 . -9) (undo-tree-id3870 . -9) (undo-tree-id3871 . -9) (undo-tree-id3872 . -9) (undo-tree-id3873 . -9) (undo-tree-id3874 . -9) (undo-tree-id3875 . -10) (undo-tree-id3876 . -9) (undo-tree-id3877 . -10) (undo-tree-id3878 . -10) (undo-tree-id3879 . -10) (undo-tree-id3880 . -10) (undo-tree-id3881 . -10) (undo-tree-id3882 . -10) (undo-tree-id3883 . -10) (undo-tree-id3884 . -10) (undo-tree-id3885 . -10) (undo-tree-id3886 . -10) (undo-tree-id3887 . -11) (undo-tree-id3888 . -10) (undo-tree-id3889 . -11) (undo-tree-id3890 . -11) (undo-tree-id3891 . -11) (undo-tree-id3892 . -11) (undo-tree-id3893 . -11) (undo-tree-id3894 . -11) (undo-tree-id3895 . -11) (undo-tree-id3896 . -11) (undo-tree-id3897 . -11) (undo-tree-id3898 . -11) (undo-tree-id3899 . -12) (undo-tree-id3900 . -11) (undo-tree-id3901 . -12) (undo-tree-id3902 . -12) (undo-tree-id3903 . -12) (undo-tree-id3904 . -12) (undo-tree-id3905 . -12) (undo-tree-id3906 . -12) (undo-tree-id3907 . -12) (undo-tree-id3908 . -12) (undo-tree-id3909 . -12) (undo-tree-id3910 . -12) (undo-tree-id3911 . -13) (undo-tree-id3912 . -12) (undo-tree-id3913 . -13) (undo-tree-id3914 . -13) (undo-tree-id3915 . -13) (undo-tree-id3916 . -13) (undo-tree-id3917 . -13) (undo-tree-id3918 . -13) (undo-tree-id3919 . -13) (undo-tree-id3920 . -13) (undo-tree-id3921 . -13) (undo-tree-id3922 . -13) (undo-tree-id3923 . -14) (undo-tree-id3924 . -13) (undo-tree-id3925 . -14) (undo-tree-id3926 . -14) (undo-tree-id3927 . -14) (undo-tree-id3928 . -14) (undo-tree-id3929 . -14) (undo-tree-id3930 . -14) (undo-tree-id3931 . -14) (undo-tree-id3932 . -14) (undo-tree-id3933 . -14) (undo-tree-id3934 . -14) (undo-tree-id3935 . -15) (undo-tree-id3936 . -14) (undo-tree-id3937 . -15) (undo-tree-id3938 . -15) (undo-tree-id3939 . -15) (undo-tree-id3940 . -15) (undo-tree-id3941 . -15) (undo-tree-id3942 . -15) (undo-tree-id3943 . -15) (undo-tree-id3944 . -15) (undo-tree-id3945 . -15) (undo-tree-id3946 . -15) (undo-tree-id3947 . -15) (undo-tree-id3948 . -14) (undo-tree-id3949 . -15) (undo-tree-id3950 . -14) (undo-tree-id3951 . -15) (undo-tree-id3952 . -14) (undo-tree-id3953 . -15) 169 (83 . 89) (75 . 83) (#("n" 0 1 (fontified t ws-butler-chg chg)) . -75) (undo-tree-id3954 . -1) (#("e" 0 1 (fontified t ws-butler-chg chg)) . -76) (undo-tree-id3955 . -1) (#("l" 0 1 (fontified t ws-butler-chg chg)) . -77) (undo-tree-id3956 . -1) 78 (73 . 78) (t 25335 54140 914604 824000)) nil (25335 54328 567196 363000) 0 nil])
([nil nil ((3960 . 3967) (#("filen" 0 5 (fontified t ws-butler-chg chg)) . -3960) (undo-tree-id3957 . -5) (undo-tree-id3958 . -5) (undo-tree-id3959 . -4) (undo-tree-id3960 . -5) (undo-tree-id3961 . -5) (undo-tree-id3962 . -5) (undo-tree-id3963 . -5) (undo-tree-id3964 . -5) (undo-tree-id3965 . -5) 3965 (3957 . 3965) (3955 . 3957) (t 25335 54328 613415 237000)) nil (25335 54343 797142 61000) 0 nil])
([nil nil ((163 . 164) (t 25335 54343 825966 742000)) nil (25335 54689 13204 589000) 0 nil])
([nil nil ((#("?" 0 1 (fontified t face rust-question-mark)) . -163) (undo-tree-id3990 . -1) (undo-tree-id3991 . -1) (undo-tree-id3992 . -1) (undo-tree-id3993 . -1) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) 164 (t 25335 54690 783704 37000)) nil (25335 54693 352531 400000) 0 nil] [nil nil ((#("        .expect(\"Not able to read ion.json file\");
" 0 8 (fontified t) 8 15 (fontified t) 15 16 (fontified t face (rainbow-delimiters-depth-2-face)) 16 28 (fontified t face font-lock-string-face) 28 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 47 (fontified t face font-lock-string-face) 47 48 (fontified t face font-lock-string-face) 48 49 (fontified t face (rainbow-delimiters-depth-2-face)) 49 50 (fontified t) 50 51 (fontified t)) . 165) (undo-tree-id3966 . -49) (undo-tree-id3967 . -51) (undo-tree-id3969 . -49) (undo-tree-id3971 . -49) (undo-tree-id3973 . -49) (undo-tree-id3975 . -49) (undo-tree-id3977 . -49) (undo-tree-id3979 . -49) (undo-tree-id3981 . -49) (undo-tree-id3983 . -49) (undo-tree-id3985 . -49) (undo-tree-id3987 . -49) (undo-tree-id3989 . -49) 214) ((165 . 216)) (25335 54688 331303 673000) 0 nil])
([nil nil ((4533 . 4537) (#("p" 0 1 (fontified t ws-butler-chg chg)) . -4533) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) 4534 (4530 . 4534) (#("file" 0 4 (fontified t ws-butler-chg chg)) . -4530) (undo-tree-id4076 . -4) (undo-tree-id4077 . -4) (undo-tree-id4078 . -4) (undo-tree-id4079 . -4) (undo-tree-id4080 . -4) (undo-tree-id4081 . -4) (undo-tree-id4082 . -4) (undo-tree-id4083 . -4) (undo-tree-id4084 . -4) 4534 (#("n" 0 1 (fontified t ws-butler-chg chg)) . -4534) (undo-tree-id4085 . -1) 4535 (4525 . 4535) (#("\"/tmp/iongraph\"" 0 1 (fontified t face font-lock-string-face) 1 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face)) . 4525) (undo-tree-id4086 . -15) (undo-tree-id4087 . -15) 4526 (t 25335 54693 687788 711000)) nil (25335 54714 134508 221000) 0 nil])
([nil nil ((164 . 165)) ((#(";" 0 1 (fontified t)) . 164) (t 25335 54488 442045 381000)) (25335 54487 958463 686000) 0 nil])
([nil current ((3806 . 3813) (#("filename" 0 1 (fontified t face font-lock-variable-name-face) 1 8 (fontified t face font-lock-variable-name-face)) . -3806) (undo-tree-id4088 . -8) (undo-tree-id4089 . -8) (undo-tree-id4090 . -8) (undo-tree-id4091 . -8) (undo-tree-id4092 . -8) (undo-tree-id4093 . -8) (undo-tree-id4094 . -8) (undo-tree-id4095 . -8) (undo-tree-id4096 . -8) (undo-tree-id4097 . -8) (undo-tree-id4098 . -8) (undo-tree-id4099 . -8) (undo-tree-id4100 . -8) 3814 (t 25335 54714 204389 309000)) nil (25335 54719 743345 600000) 0 nil])
nil
nil
